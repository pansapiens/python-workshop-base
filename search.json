[
  {
    "objectID": "workshop/index.html",
    "href": "workshop/index.html",
    "title": "Introduction to Python Workshop",
    "section": "",
    "text": "Welcome to Introduction to Python !\n\n\n\n01 - Introduction - the basics of Python\n02 - Data analysis in Python with Pandas\n03 - Indexing and slicing\n04 - Missing Values\n05 - Combining DataFrames in Pandas\n06 - Repetitive tasks with loops\n07 - Plotting with plotnine (ggplot)\n08 - Reusable and modular code with functions\n09 - Defensive Programming\n\nSome of these modules have been adapted from the original versions at Data Carpentry - Python for Ecologists and Software Carpentry - Programming with Python (used under a CC-BY 4.0 license)."
  },
  {
    "objectID": "workshop/index.html#modules",
    "href": "workshop/index.html#modules",
    "title": "Introduction to Python Workshop",
    "section": "",
    "text": "01 - Introduction - the basics of Python\n02 - Data analysis in Python with Pandas\n03 - Indexing and slicing\n04 - Missing Values\n05 - Combining DataFrames in Pandas\n06 - Repetitive tasks with loops\n07 - Plotting with plotnine (ggplot)\n08 - Reusable and modular code with functions\n09 - Defensive Programming\n\nSome of these modules have been adapted from the original versions at Data Carpentry - Python for Ecologists and Software Carpentry - Programming with Python (used under a CC-BY 4.0 license)."
  },
  {
    "objectID": "workshop/halfday.html",
    "href": "workshop/halfday.html",
    "title": "Introduction to Python Workshop (half-day)",
    "section": "",
    "text": "Welcome to Introduction to Python !\nThis is a selection of modules designed for an intensive half-day workshop. Your instructor my decide to skip a module (eg Handling Missing Values) if you are tight on time.\n\n\n\n01 - Introduction - the basics of Python\n02 - Data analysis in Python with Pandas\n03 - Missing Values\n04 - Repetitive tasks with loops\n05 - Plotting with plotnine (ggplot)"
  },
  {
    "objectID": "workshop/halfday.html#sections",
    "href": "workshop/halfday.html#sections",
    "title": "Introduction to Python Workshop (half-day)",
    "section": "",
    "text": "01 - Introduction - the basics of Python\n02 - Data analysis in Python with Pandas\n03 - Missing Values\n04 - Repetitive tasks with loops\n05 - Plotting with plotnine (ggplot)"
  },
  {
    "objectID": "workshop/fullday.html",
    "href": "workshop/fullday.html",
    "title": "Introduction to Python Workshop",
    "section": "",
    "text": "Welcome to Introduction to Python !\nThis is a selection of modules designed for an intensive full-day workshop.\n\n\n\n01 - Introduction - the basics of Python\n02 - Repetitive tasks with loops\n03 - Data analysis in Python with Pandas\n04 - Reusable and modular code with functions\n05 - Handling Missing Values\n06 - Plotting with plotnine (ggplot)"
  },
  {
    "objectID": "workshop/fullday.html#sections",
    "href": "workshop/fullday.html#sections",
    "title": "Introduction to Python Workshop",
    "section": "",
    "text": "01 - Introduction - the basics of Python\n02 - Repetitive tasks with loops\n03 - Data analysis in Python with Pandas\n04 - Reusable and modular code with functions\n05 - Handling Missing Values\n06 - Plotting with plotnine (ggplot)"
  },
  {
    "objectID": "workshop/modules/intro.html",
    "href": "workshop/modules/intro.html",
    "title": "Introduction - The Basics of Python",
    "section": "",
    "text": "Python is a general purpose programming language that supports rapid development of scripts and applications.\nPython‚Äôs main advantages:\n\nOpen Source software, supported by Python Software Foundation\nAvailable on all major platforms (ie. Windows, Linux and MacOS)\nIt is a general-purpose programming language, designed for readability\nSupports multiple programming paradigms (‚Äòfunctional‚Äô, ‚Äòobject oriented‚Äô)\nVery large community with a rich ecosystem of third-party packages\n\n\n\nPython is an interpreted language* which can be used in two ways:\n\n‚ÄúInteractive‚Äù Mode: It functions like an ‚Äúadvanced calculator‚Äù, executing one command at a time:\n\nuser:host:~$ python\nPython 3.5.1 (default, Oct 23 2015, 18:05:06)\n[GCC 4.8.3] on linux2\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt; 2 + 2\n4\n&gt;&gt;&gt; print(\"Hello World\")\nHello World\n\n‚ÄúScripting‚Äù Mode: Executing a series of ‚Äúcommands‚Äù saved in text file, usually with a .py extension after the name of your file:\n\nuser:host:~$ python my_script.py\nHello World\n\n\n\nA convenient and powerful way to use interactive-mode Python is via a Jupyter Notebook, or similar browser-based interface.\nThis particularly lends itself to data analysis since the notebook records a history of commands and shows output and graphs immediately in the browser.\nThere are several ways you can run a Jupyter(-style) notebook - locally installed on your computer or hosted as a service on the web. Today we will use a Jupyter notebook service provided by Google: https://colab.research.google.com (Colaboratory).\n\n\nGo to https://colab.research.google.com and login with your Google account.\nSelect NEW NOTEBOOK ‚Üí NEW PYTHON 3 NOTEBOOK - a new notebook will be created.\n\nType some Python code in the top cell, eg:\nprint(\"Hello Jupyter !\")\nShift-Enter to run the contents of the cell\n\nYou can add new cells.\nInsert ‚Üí Insert Code Cell\n\nNOTE: When the text on the left hand of the cell is: In [*] (with an asterisk rather than a number), the cell is still running. It‚Äôs usually best to wait until one cell has finished running before running the next.\nLet‚Äôs begin writing some code in our notebook.\n\nprint(\"Hello Jupyter !\")\n\nHello Jupyter !\n\n\nIn Jupyter/Collaboratory, just typing the name of a variable in the cell prints its representation:\n\nmessage = \"Hello again !\"\nmessage\n\n'Hello again !'\n\n\n\n# A 'hash' symbol denotes a comment\n# This is a comment. Anything after the 'hash' symbol on the line is ignored by the Python interpreter\n\nprint(\"No comment\")  # comment\n\nNo comment\n\n\n\n\n\n\n\n\n\na = 5\n\n\na\n\n5\n\n\n\ntype(a)\n\nint\n\n\nAdding a decimal point creates a float\n\nb = 5.0\n\n\nb\n\n5.0\n\n\n\ntype(b)\n\nfloat\n\n\nint and float are collectively called ‚Äònumeric‚Äô types\n(There are also other numeric types like hex for hexidemical and complex for complex numbers)\n\n\n\n\nWhat is the type of the variable letters defined below ?\nletters = \"ABACBS\"\n\n\nint\n\n\nstr\n\n\nfloat\n\n\ntext\n\n\nWrite some code the outputs the type - paste your answer into the Etherpad.\n\n\n\nOption B - str.\n\nletters = \"ABACBS\"\ntype(letters)\n\nstr\n\n\n\n\n\nsome_words = \"Python3 strings are Unicode (UTF-8) ‚ù§‚ù§‚ù§ üò∏ Ëõá\"\n\n\nsome_words\n\n'Python3 strings are Unicode (UTF-8) ‚ù§‚ù§‚ù§ üò∏ Ëõá'\n\n\n\ntype(some_words)\n\nstr\n\n\nThe variable some_words is of type str, short for ‚Äústring‚Äù. Strings hold sequences of characters, which can be letters, numbers, punctuation or more exotic forms of text (even emoji!).\n\n\n\n\nWe can perform mathematical calculations in Python using the basic operators:\n+ - * / % **\n\n2 + 2  # Addition\n\n4\n\n\n\n6 * 7  # Multiplication\n\n42\n\n\n\n2 ** 16  # Power\n\n65536\n\n\n\n13 % 5  # Modulo\n\n3\n\n\n\n# int + int = int\na = 5\na + 1\n\n6\n\n\n\n# float + int = float\nb = 5.0\nb + 1\n\n6.0\n\n\n\na + b\n\n10.0\n\n\nsome_words = \"I'm a string\"\na = 6\na + some_words\nOutputs:\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n&lt;ipython-input-1-781eba7cf148&gt; in &lt;module&gt;()\n      1 some_words = \"I'm a string\"\n      2 a = 6\n----&gt; 3 a + some_words\n\nTypeError: unsupported operand type(s) for +: 'int' and 'str'\n\nstr(a) + \" \" + some_words\n\n'5 Python3 strings are Unicode (UTF-8) ‚ù§‚ù§‚ù§ üò∏ Ëõá'\n\n\n\n# Shorthand: operators with assignment\na += 1\na\n\n# Equivalent to:\n# a = a + 1\n\n6\n\n\n\n\nWe can also use comparison and logic operators: &lt;, &gt;, ==, !=, &lt;=, &gt;= and statements of identity such as and, or, not. The data type returned by this is called a boolean.\n\n3 &gt; 4\n\nFalse\n\n\n\nTrue and True\n\nTrue\n\n\n\nTrue or False\n\nTrue\n\n\n\n\n\n\n\n\n\nnumbers = [2, 4, 6, 8, 10]\nnumbers\n\n[2, 4, 6, 8, 10]\n\n\n\n# `len` get the length of a list\nlen(numbers)\n\n5\n\n\n\n# Lists can contain multiple data types, including other lists\nmixed_list = [\"asdf\", 2, 3.142, numbers, ['a','b','c']]\nmixed_list\n\n['asdf', 2, 3.142, [2, 4, 6, 8, 10], ['a', 'b', 'c']]\n\n\nYou can retrieve items from a list by their index. In Python, the first item has an index of 0 (zero).\n\nnumbers[0]\n\n2\n\n\n\nnumbers[3]\n\n8\n\n\nYou can also assign a new value to any position in the list.\n\nnumbers[3] = numbers[3] * 100\nnumbers\n\n[2, 4, 6, 800, 10]\n\n\nYou can append items to the end of the list.\n\nnumbers.append(12)\nnumbers\n\n[2, 4, 6, 800, 10, 12]\n\n\nYou can add multiple items to the end of a list with extend.\n\nnumbers.extend([14, 16, 18])\nnumbers\n\n[2, 4, 6, 800, 10, 12, 14, 16, 18]\n\n\n\n\n\nA for loop can be used to access the elements in a list or other Python data structure one at a time. We will learn about loops in other lesson.\n\nfor num in numbers:\n    print(num)\n\n2\n4\n6\n800\n10\n12\n14\n16\n18\n\n\nIndentation is very important in Python. Note that the second line in the example above is indented, indicating the code that is the body of the loop.\nTo find out what methods are available for an object, we can use the built-in help command:\n\nhelp(numbers)\n\nHelp on list object:\n\nclass list(object)\n |  list(iterable=(), /)\n |  \n |  Built-in mutable sequence.\n |  \n |  If no argument is given, the constructor creates a new empty list.\n |  The argument must be an iterable if specified.\n |  \n |  Methods defined here:\n |  \n |  __add__(self, value, /)\n |      Return self+value.\n |  \n |  __contains__(self, key, /)\n |      Return key in self.\n |  \n |  __delitem__(self, key, /)\n |      Delete self[key].\n |  \n |  __eq__(self, value, /)\n |      Return self==value.\n |  \n |  __ge__(self, value, /)\n |      Return self&gt;=value.\n |  \n |  __getattribute__(self, name, /)\n |      Return getattr(self, name).\n |  \n |  __getitem__(...)\n |      x.__getitem__(y) &lt;==&gt; x[y]\n |  \n |  __gt__(self, value, /)\n |      Return self&gt;value.\n |  \n |  __iadd__(self, value, /)\n |      Implement self+=value.\n |  \n |  __imul__(self, value, /)\n |      Implement self*=value.\n |  \n |  __init__(self, /, *args, **kwargs)\n |      Initialize self.  See help(type(self)) for accurate signature.\n |  \n |  __iter__(self, /)\n |      Implement iter(self).\n |  \n |  __le__(self, value, /)\n |      Return self&lt;=value.\n |  \n |  __len__(self, /)\n |      Return len(self).\n |  \n |  __lt__(self, value, /)\n |      Return self&lt;value.\n |  \n |  __mul__(self, value, /)\n |      Return self*value.\n |  \n |  __ne__(self, value, /)\n |      Return self!=value.\n |  \n |  __repr__(self, /)\n |      Return repr(self).\n |  \n |  __reversed__(self, /)\n |      Return a reverse iterator over the list.\n |  \n |  __rmul__(self, value, /)\n |      Return value*self.\n |  \n |  __setitem__(self, key, value, /)\n |      Set self[key] to value.\n |  \n |  __sizeof__(self, /)\n |      Return the size of the list in memory, in bytes.\n |  \n |  append(self, object, /)\n |      Append object to the end of the list.\n |  \n |  clear(self, /)\n |      Remove all items from list.\n |  \n |  copy(self, /)\n |      Return a shallow copy of the list.\n |  \n |  count(self, value, /)\n |      Return number of occurrences of value.\n |  \n |  extend(self, iterable, /)\n |      Extend list by appending elements from the iterable.\n |  \n |  index(self, value, start=0, stop=9223372036854775807, /)\n |      Return first index of value.\n |      \n |      Raises ValueError if the value is not present.\n |  \n |  insert(self, index, object, /)\n |      Insert object before index.\n |  \n |  pop(self, index=-1, /)\n |      Remove and return item at index (default last).\n |      \n |      Raises IndexError if list is empty or index is out of range.\n |  \n |  remove(self, value, /)\n |      Remove first occurrence of value.\n |      \n |      Raises ValueError if the value is not present.\n |  \n |  reverse(self, /)\n |      Reverse *IN PLACE*.\n |  \n |  sort(self, /, *, key=None, reverse=False)\n |      Sort the list in ascending order and return None.\n |      \n |      The sort is in-place (i.e. the list itself is modified) and stable (i.e. the\n |      order of two equal elements is maintained).\n |      \n |      If a key function is given, apply it once to each list item and sort them,\n |      ascending or descending, according to their function values.\n |      \n |      The reverse flag can be set to sort in descending order.\n |  \n |  ----------------------------------------------------------------------\n |  Class methods defined here:\n |  \n |  __class_getitem__(...) from builtins.type\n |      See PEP 585\n |  \n |  ----------------------------------------------------------------------\n |  Static methods defined here:\n |  \n |  __new__(*args, **kwargs) from builtins.type\n |      Create and return a new object.  See help(type) for accurate signature.\n |  \n |  ----------------------------------------------------------------------\n |  Data and other attributes defined here:\n |  \n |  __hash__ = None\n\n\n\n\n\n\nA tuple is similar to a list in that it‚Äôs an ordered sequence of elements. However, tuples can not be changed once created (they are ‚Äúimmutable‚Äù). Tuples are created by placing comma-separated values inside parentheses ().\n\ntuples_are_immutable = (\"bar\", 100, 200, \"foo\")\ntuples_are_immutable\n\n('bar', 100, 200, 'foo')\n\n\n\ntuples_are_immutable[1]\n\n100\n\n\ntuples_are_immutable[1] = 666\nOutputs:\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n&lt;ipython-input-39-c91965b0815a&gt; in &lt;module&gt;()\n----&gt; 1 tuples_are_immutable[1] = 666\n\nTypeError: 'tuple' object does not support item assignment\n\n\n\nDictionaries are a container that store key-value pairs. They are unordered.\nOther programming languages might call this a ‚Äòhash‚Äô, ‚Äòhashtable‚Äô or ‚Äòhashmap‚Äô.\n\npairs = {'Apple': 1, 'Orange': 2, 'Pear': 4}\npairs\n\n{'Apple': 1, 'Orange': 2, 'Pear': 4}\n\n\n\npairs['Orange']\n\n2\n\n\n\npairs['Orange'] = 16\npairs\n\n{'Apple': 1, 'Orange': 16, 'Pear': 4}\n\n\nThe items method returns a sequence of the key-value pairs as tuples.\nvalues returns a sequence of just the values.\nkeys returns a sequence of just the keys.\n\nIn Python 3, the .items(), .values() and .keys() methods return a ‚Äòdictionary view‚Äô object that behaves like a list or tuple in for loops but doesn‚Äôt support indexing. ‚ÄòDictionary views‚Äô stay in sync even when the dictionary changes.\nYou can turn them into a normal list or tuple with the list() or tuple() functions.\n\npairs.items()\n# list(pairs.items())\n\ndict_items([('Apple', 1), ('Orange', 16), ('Pear', 4)])\n\n\n\npairs.values()\n# list(pairs.values())\n\ndict_values([1, 16, 4])\n\n\n\npairs.keys()\n# list(pairs.keys())\n\ndict_keys(['Apple', 'Orange', 'Pear'])\n\n\n\nlen(pairs)\n\n3\n\n\n\ndict_of_dicts = {'first': {1:2, 2: 4, 4: 8, 8: 16}, 'second': {'a': 2.2, 'b': 4.4}}\ndict_of_dicts\n\n{'first': {1: 2, 2: 4, 4: 8, 8: 16}, 'second': {'a': 2.2, 'b': 4.4}}\n\n\n\n\n\n\nGiven the dictionary:\njam_ratings = {'Plum': 6, 'Apricot': 2, 'Strawberry': 8}\nHow would you change the value associated with the key Apricot to 9.\n\njam_ratings = {'apricot': 9}\njam_ratings[9] = 'Apricot'\njam_ratings['Apricot'] = 9\njam_ratings[2] = 'Apricot'\n\n\n\n\nThe correct answer is C.\nA assigns the name jam_ratings to a new dictionary with only the key apricot - not only are the other jam ratings now missing, but strings used as dictionary keys are case sensitive - apricot is not the same key as Apricot.\nB mixes up the value and the key. Assigning to a dictionary uses the form: dictionary[key] = value.\nC is correct. Bonus - another way to do this would be jam_ratings.update({'Apricot': 9}) or even jam_ratings.update(Apricot=9).\nD mixes up the value and the key (and doesn‚Äôt actually include the new value to be assigned, 9, anywhere). 2 is the original value, Apricot is the key. Assigning to a dictionary uses the form: dictionary[key] = value."
  },
  {
    "objectID": "workshop/modules/intro.html#interpreter",
    "href": "workshop/modules/intro.html#interpreter",
    "title": "Introduction - The Basics of Python",
    "section": "",
    "text": "Python is an interpreted language* which can be used in two ways:\n\n‚ÄúInteractive‚Äù Mode: It functions like an ‚Äúadvanced calculator‚Äù, executing one command at a time:\n\nuser:host:~$ python\nPython 3.5.1 (default, Oct 23 2015, 18:05:06)\n[GCC 4.8.3] on linux2\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt; 2 + 2\n4\n&gt;&gt;&gt; print(\"Hello World\")\nHello World\n\n‚ÄúScripting‚Äù Mode: Executing a series of ‚Äúcommands‚Äù saved in text file, usually with a .py extension after the name of your file:\n\nuser:host:~$ python my_script.py\nHello World"
  },
  {
    "objectID": "workshop/modules/intro.html#using-interactive-python-in-jupyter-style-notebooks",
    "href": "workshop/modules/intro.html#using-interactive-python-in-jupyter-style-notebooks",
    "title": "Introduction - The Basics of Python",
    "section": "",
    "text": "A convenient and powerful way to use interactive-mode Python is via a Jupyter Notebook, or similar browser-based interface.\nThis particularly lends itself to data analysis since the notebook records a history of commands and shows output and graphs immediately in the browser.\nThere are several ways you can run a Jupyter(-style) notebook - locally installed on your computer or hosted as a service on the web. Today we will use a Jupyter notebook service provided by Google: https://colab.research.google.com (Colaboratory).\n\n\nGo to https://colab.research.google.com and login with your Google account.\nSelect NEW NOTEBOOK ‚Üí NEW PYTHON 3 NOTEBOOK - a new notebook will be created.\n\nType some Python code in the top cell, eg:\nprint(\"Hello Jupyter !\")\nShift-Enter to run the contents of the cell\n\nYou can add new cells.\nInsert ‚Üí Insert Code Cell\n\nNOTE: When the text on the left hand of the cell is: In [*] (with an asterisk rather than a number), the cell is still running. It‚Äôs usually best to wait until one cell has finished running before running the next.\nLet‚Äôs begin writing some code in our notebook.\n\nprint(\"Hello Jupyter !\")\n\nHello Jupyter !\n\n\nIn Jupyter/Collaboratory, just typing the name of a variable in the cell prints its representation:\n\nmessage = \"Hello again !\"\nmessage\n\n'Hello again !'\n\n\n\n# A 'hash' symbol denotes a comment\n# This is a comment. Anything after the 'hash' symbol on the line is ignored by the Python interpreter\n\nprint(\"No comment\")  # comment\n\nNo comment"
  },
  {
    "objectID": "workshop/modules/intro.html#variables-and-data-types",
    "href": "workshop/modules/intro.html#variables-and-data-types",
    "title": "Introduction - The Basics of Python",
    "section": "",
    "text": "a = 5\n\n\na\n\n5\n\n\n\ntype(a)\n\nint\n\n\nAdding a decimal point creates a float\n\nb = 5.0\n\n\nb\n\n5.0\n\n\n\ntype(b)\n\nfloat\n\n\nint and float are collectively called ‚Äònumeric‚Äô types\n(There are also other numeric types like hex for hexidemical and complex for complex numbers)"
  },
  {
    "objectID": "workshop/modules/intro.html#challenge---types",
    "href": "workshop/modules/intro.html#challenge---types",
    "title": "Introduction - The Basics of Python",
    "section": "",
    "text": "What is the type of the variable letters defined below ?\nletters = \"ABACBS\"\n\n\nint\n\n\nstr\n\n\nfloat\n\n\ntext\n\n\nWrite some code the outputs the type - paste your answer into the Etherpad."
  },
  {
    "objectID": "workshop/modules/intro.html#solution",
    "href": "workshop/modules/intro.html#solution",
    "title": "Introduction - The Basics of Python",
    "section": "",
    "text": "Option B - str.\n\nletters = \"ABACBS\"\ntype(letters)\n\nstr\n\n\n\n\n\nsome_words = \"Python3 strings are Unicode (UTF-8) ‚ù§‚ù§‚ù§ üò∏ Ëõá\"\n\n\nsome_words\n\n'Python3 strings are Unicode (UTF-8) ‚ù§‚ù§‚ù§ üò∏ Ëõá'\n\n\n\ntype(some_words)\n\nstr\n\n\nThe variable some_words is of type str, short for ‚Äústring‚Äù. Strings hold sequences of characters, which can be letters, numbers, punctuation or more exotic forms of text (even emoji!)."
  },
  {
    "objectID": "workshop/modules/intro.html#operators",
    "href": "workshop/modules/intro.html#operators",
    "title": "Introduction - The Basics of Python",
    "section": "",
    "text": "We can perform mathematical calculations in Python using the basic operators:\n+ - * / % **\n\n2 + 2  # Addition\n\n4\n\n\n\n6 * 7  # Multiplication\n\n42\n\n\n\n2 ** 16  # Power\n\n65536\n\n\n\n13 % 5  # Modulo\n\n3\n\n\n\n# int + int = int\na = 5\na + 1\n\n6\n\n\n\n# float + int = float\nb = 5.0\nb + 1\n\n6.0\n\n\n\na + b\n\n10.0\n\n\nsome_words = \"I'm a string\"\na = 6\na + some_words\nOutputs:\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n&lt;ipython-input-1-781eba7cf148&gt; in &lt;module&gt;()\n      1 some_words = \"I'm a string\"\n      2 a = 6\n----&gt; 3 a + some_words\n\nTypeError: unsupported operand type(s) for +: 'int' and 'str'\n\nstr(a) + \" \" + some_words\n\n'5 Python3 strings are Unicode (UTF-8) ‚ù§‚ù§‚ù§ üò∏ Ëõá'\n\n\n\n# Shorthand: operators with assignment\na += 1\na\n\n# Equivalent to:\n# a = a + 1\n\n6\n\n\n\n\nWe can also use comparison and logic operators: &lt;, &gt;, ==, !=, &lt;=, &gt;= and statements of identity such as and, or, not. The data type returned by this is called a boolean.\n\n3 &gt; 4\n\nFalse\n\n\n\nTrue and True\n\nTrue\n\n\n\nTrue or False\n\nTrue"
  },
  {
    "objectID": "workshop/modules/intro.html#lists-and-sequence-types",
    "href": "workshop/modules/intro.html#lists-and-sequence-types",
    "title": "Introduction - The Basics of Python",
    "section": "",
    "text": "numbers = [2, 4, 6, 8, 10]\nnumbers\n\n[2, 4, 6, 8, 10]\n\n\n\n# `len` get the length of a list\nlen(numbers)\n\n5\n\n\n\n# Lists can contain multiple data types, including other lists\nmixed_list = [\"asdf\", 2, 3.142, numbers, ['a','b','c']]\nmixed_list\n\n['asdf', 2, 3.142, [2, 4, 6, 8, 10], ['a', 'b', 'c']]\n\n\nYou can retrieve items from a list by their index. In Python, the first item has an index of 0 (zero).\n\nnumbers[0]\n\n2\n\n\n\nnumbers[3]\n\n8\n\n\nYou can also assign a new value to any position in the list.\n\nnumbers[3] = numbers[3] * 100\nnumbers\n\n[2, 4, 6, 800, 10]\n\n\nYou can append items to the end of the list.\n\nnumbers.append(12)\nnumbers\n\n[2, 4, 6, 800, 10, 12]\n\n\nYou can add multiple items to the end of a list with extend.\n\nnumbers.extend([14, 16, 18])\nnumbers\n\n[2, 4, 6, 800, 10, 12, 14, 16, 18]\n\n\n\n\n\nA for loop can be used to access the elements in a list or other Python data structure one at a time. We will learn about loops in other lesson.\n\nfor num in numbers:\n    print(num)\n\n2\n4\n6\n800\n10\n12\n14\n16\n18\n\n\nIndentation is very important in Python. Note that the second line in the example above is indented, indicating the code that is the body of the loop.\nTo find out what methods are available for an object, we can use the built-in help command:\n\nhelp(numbers)\n\nHelp on list object:\n\nclass list(object)\n |  list(iterable=(), /)\n |  \n |  Built-in mutable sequence.\n |  \n |  If no argument is given, the constructor creates a new empty list.\n |  The argument must be an iterable if specified.\n |  \n |  Methods defined here:\n |  \n |  __add__(self, value, /)\n |      Return self+value.\n |  \n |  __contains__(self, key, /)\n |      Return key in self.\n |  \n |  __delitem__(self, key, /)\n |      Delete self[key].\n |  \n |  __eq__(self, value, /)\n |      Return self==value.\n |  \n |  __ge__(self, value, /)\n |      Return self&gt;=value.\n |  \n |  __getattribute__(self, name, /)\n |      Return getattr(self, name).\n |  \n |  __getitem__(...)\n |      x.__getitem__(y) &lt;==&gt; x[y]\n |  \n |  __gt__(self, value, /)\n |      Return self&gt;value.\n |  \n |  __iadd__(self, value, /)\n |      Implement self+=value.\n |  \n |  __imul__(self, value, /)\n |      Implement self*=value.\n |  \n |  __init__(self, /, *args, **kwargs)\n |      Initialize self.  See help(type(self)) for accurate signature.\n |  \n |  __iter__(self, /)\n |      Implement iter(self).\n |  \n |  __le__(self, value, /)\n |      Return self&lt;=value.\n |  \n |  __len__(self, /)\n |      Return len(self).\n |  \n |  __lt__(self, value, /)\n |      Return self&lt;value.\n |  \n |  __mul__(self, value, /)\n |      Return self*value.\n |  \n |  __ne__(self, value, /)\n |      Return self!=value.\n |  \n |  __repr__(self, /)\n |      Return repr(self).\n |  \n |  __reversed__(self, /)\n |      Return a reverse iterator over the list.\n |  \n |  __rmul__(self, value, /)\n |      Return value*self.\n |  \n |  __setitem__(self, key, value, /)\n |      Set self[key] to value.\n |  \n |  __sizeof__(self, /)\n |      Return the size of the list in memory, in bytes.\n |  \n |  append(self, object, /)\n |      Append object to the end of the list.\n |  \n |  clear(self, /)\n |      Remove all items from list.\n |  \n |  copy(self, /)\n |      Return a shallow copy of the list.\n |  \n |  count(self, value, /)\n |      Return number of occurrences of value.\n |  \n |  extend(self, iterable, /)\n |      Extend list by appending elements from the iterable.\n |  \n |  index(self, value, start=0, stop=9223372036854775807, /)\n |      Return first index of value.\n |      \n |      Raises ValueError if the value is not present.\n |  \n |  insert(self, index, object, /)\n |      Insert object before index.\n |  \n |  pop(self, index=-1, /)\n |      Remove and return item at index (default last).\n |      \n |      Raises IndexError if list is empty or index is out of range.\n |  \n |  remove(self, value, /)\n |      Remove first occurrence of value.\n |      \n |      Raises ValueError if the value is not present.\n |  \n |  reverse(self, /)\n |      Reverse *IN PLACE*.\n |  \n |  sort(self, /, *, key=None, reverse=False)\n |      Sort the list in ascending order and return None.\n |      \n |      The sort is in-place (i.e. the list itself is modified) and stable (i.e. the\n |      order of two equal elements is maintained).\n |      \n |      If a key function is given, apply it once to each list item and sort them,\n |      ascending or descending, according to their function values.\n |      \n |      The reverse flag can be set to sort in descending order.\n |  \n |  ----------------------------------------------------------------------\n |  Class methods defined here:\n |  \n |  __class_getitem__(...) from builtins.type\n |      See PEP 585\n |  \n |  ----------------------------------------------------------------------\n |  Static methods defined here:\n |  \n |  __new__(*args, **kwargs) from builtins.type\n |      Create and return a new object.  See help(type) for accurate signature.\n |  \n |  ----------------------------------------------------------------------\n |  Data and other attributes defined here:\n |  \n |  __hash__ = None\n\n\n\n\n\n\nA tuple is similar to a list in that it‚Äôs an ordered sequence of elements. However, tuples can not be changed once created (they are ‚Äúimmutable‚Äù). Tuples are created by placing comma-separated values inside parentheses ().\n\ntuples_are_immutable = (\"bar\", 100, 200, \"foo\")\ntuples_are_immutable\n\n('bar', 100, 200, 'foo')\n\n\n\ntuples_are_immutable[1]\n\n100\n\n\ntuples_are_immutable[1] = 666\nOutputs:\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n&lt;ipython-input-39-c91965b0815a&gt; in &lt;module&gt;()\n----&gt; 1 tuples_are_immutable[1] = 666\n\nTypeError: 'tuple' object does not support item assignment\n\n\n\nDictionaries are a container that store key-value pairs. They are unordered.\nOther programming languages might call this a ‚Äòhash‚Äô, ‚Äòhashtable‚Äô or ‚Äòhashmap‚Äô.\n\npairs = {'Apple': 1, 'Orange': 2, 'Pear': 4}\npairs\n\n{'Apple': 1, 'Orange': 2, 'Pear': 4}\n\n\n\npairs['Orange']\n\n2\n\n\n\npairs['Orange'] = 16\npairs\n\n{'Apple': 1, 'Orange': 16, 'Pear': 4}\n\n\nThe items method returns a sequence of the key-value pairs as tuples.\nvalues returns a sequence of just the values.\nkeys returns a sequence of just the keys.\n\nIn Python 3, the .items(), .values() and .keys() methods return a ‚Äòdictionary view‚Äô object that behaves like a list or tuple in for loops but doesn‚Äôt support indexing. ‚ÄòDictionary views‚Äô stay in sync even when the dictionary changes.\nYou can turn them into a normal list or tuple with the list() or tuple() functions.\n\npairs.items()\n# list(pairs.items())\n\ndict_items([('Apple', 1), ('Orange', 16), ('Pear', 4)])\n\n\n\npairs.values()\n# list(pairs.values())\n\ndict_values([1, 16, 4])\n\n\n\npairs.keys()\n# list(pairs.keys())\n\ndict_keys(['Apple', 'Orange', 'Pear'])\n\n\n\nlen(pairs)\n\n3\n\n\n\ndict_of_dicts = {'first': {1:2, 2: 4, 4: 8, 8: 16}, 'second': {'a': 2.2, 'b': 4.4}}\ndict_of_dicts\n\n{'first': {1: 2, 2: 4, 4: 8, 8: 16}, 'second': {'a': 2.2, 'b': 4.4}}"
  },
  {
    "objectID": "workshop/modules/intro.html#challenge---dictionaries",
    "href": "workshop/modules/intro.html#challenge---dictionaries",
    "title": "Introduction - The Basics of Python",
    "section": "",
    "text": "Given the dictionary:\njam_ratings = {'Plum': 6, 'Apricot': 2, 'Strawberry': 8}\nHow would you change the value associated with the key Apricot to 9.\n\njam_ratings = {'apricot': 9}\njam_ratings[9] = 'Apricot'\njam_ratings['Apricot'] = 9\njam_ratings[2] = 'Apricot'"
  },
  {
    "objectID": "workshop/modules/intro.html#solution---dictionaries",
    "href": "workshop/modules/intro.html#solution---dictionaries",
    "title": "Introduction - The Basics of Python",
    "section": "",
    "text": "The correct answer is C.\nA assigns the name jam_ratings to a new dictionary with only the key apricot - not only are the other jam ratings now missing, but strings used as dictionary keys are case sensitive - apricot is not the same key as Apricot.\nB mixes up the value and the key. Assigning to a dictionary uses the form: dictionary[key] = value.\nC is correct. Bonus - another way to do this would be jam_ratings.update({'Apricot': 9}) or even jam_ratings.update(Apricot=9).\nD mixes up the value and the key (and doesn‚Äôt actually include the new value to be assigned, 9, anywhere). 2 is the original value, Apricot is the key. Assigning to a dictionary uses the form: dictionary[key] = value."
  },
  {
    "objectID": "workshop/modules/working_with_data.html#instructor-notes",
    "href": "workshop/modules/working_with_data.html#instructor-notes",
    "title": "Data analysis in Python with Pandas",
    "section": "Instructor notes",
    "text": "Instructor notes\nEstimated teaching time: 30 min\nEstimated challenge time: 30 min\nKey questions:\n\n‚ÄúHow can I import data in Python ?‚Äù\n‚ÄúWhat is Pandas ?‚Äù\n‚ÄúWhy should I use Pandas to work with data ?‚Äù\n\nLearning objectives:\n\n‚ÄúNavigate the workshop directory and download a dataset.‚Äù\n‚ÄúExplain what a library is and what libraries are used for.‚Äù\n‚ÄúDescribe what the Python Data Analysis Library (Pandas) is.‚Äù\n‚ÄúLoad the Python Data Analysis Library (Pandas).‚Äù\n‚ÄúUse read_csv to read tabular data into Python.‚Äù\n‚ÄúDescribe what a DataFrame is in Python.‚Äù\n‚ÄúAccess and summarize data stored in a DataFrame.‚Äù\n‚ÄúDefine indexing as it relates to data structures.‚Äù\n‚ÄúPerform basic mathematical operations and summary statistics on data in a Pandas DataFrame.‚Äù\n‚ÄúCreate simple plots.‚Äù"
  },
  {
    "objectID": "workshop/modules/working_with_data.html#automating-data-analysis-tasks-in-python",
    "href": "workshop/modules/working_with_data.html#automating-data-analysis-tasks-in-python",
    "title": "Data analysis in Python with Pandas",
    "section": "Automating data analysis tasks in Python",
    "text": "Automating data analysis tasks in Python\nWe can automate the process of performing data manipulations in Python. It‚Äôs efficient to spend time building the code to perform these tasks because once it‚Äôs built, we can use it over and over on different datasets that use a similar format. This makes our methods easily reproducible. We can also easily share our code with colleagues and they can replicate the same analysis.\n\nThe Dataset\nFor this lesson, we will be using the Portal Teaching data, a subset of the data from Ernst et al Long-term monitoring and experimental manipulation of a Chihuahuan Desert ecosystem near Portal, Arizona, USA\nWe will be using this dataset, which can be downloaded here: surveys.csv ‚Ä¶ but don‚Äôt click to download it in your browser - we are going to use Python !\n\nimport urllib.request\n# You can also get this URL value by right-clicking the `surveys.csv` link above and selecting \"Copy Link Address\"\nurl = 'https://monashdatafluency.github.io/python-workshop-base/modules/data/surveys.csv'\n# url = 'https://goo.gl/9ZxqBg'  # or a shortened version to save typing\nurllib.request.urlretrieve(url, 'surveys.csv')\n\n('surveys.csv', &lt;http.client.HTTPMessage at 0x7fb830441de0&gt;)\n\n\nIf Jupyter is running locally on your computer, you‚Äôll now have a file surveys.csv in the current working directory. You can check by clicking on File tab on the top left of the notebook to see if the file exists. If you are running Jupyter on a remote server or cloud service (eg Colaboratory or Azure Notebooks), the file will be there instead.\nWe are studying the species and weight of animals caught in plots in our study area. The dataset is stored as a .csv file: each row holds information for a single animal, and the columns represent:\n\n\n\nColumn\nDescription\n\n\n\n\nrecord_id\nUnique id for the observation\n\n\nmonth\nmonth of observation\n\n\nday\nday of observation\n\n\nyear\nyear of observation\n\n\nsite_id\nID of a particular plot\n\n\nspecies_id\n2-letter code\n\n\nsex\nsex of animal (‚ÄúM‚Äù, ‚ÄúF‚Äù)\n\n\nhindfoot_length\nlength of the hindfoot in mm\n\n\nweight\nweight of the animal in grams\n\n\n\nThe first few rows of our file look like this:\nrecord_id,month,day,year,site_id,species_id,sex,hindfoot_length,weight\n1,7,16,1977,2,NL,M,32,\n2,7,16,1977,3,NL,M,33,\n3,7,16,1977,2,DM,F,37,\n4,7,16,1977,7,DM,M,36,\n5,7,16,1977,3,DM,M,35,\n6,7,16,1977,1,PF,M,14,\n7,7,16,1977,2,PE,F,,\n8,7,16,1977,1,DM,M,37,\n9,7,16,1977,1,DM,F,34,"
  },
  {
    "objectID": "workshop/modules/working_with_data.html#about-libraries",
    "href": "workshop/modules/working_with_data.html#about-libraries",
    "title": "Data analysis in Python with Pandas",
    "section": "About Libraries",
    "text": "About Libraries\nA library in Python contains a set of tools (called functions) that perform tasks on our data. Importing a library is like getting a piece of lab equipment out of a storage locker and setting it up on the bench for use in a project. Once a library is set up, it can be used or called to perform many tasks.\nIf you have noticed in the previous code import urllib.request, we are calling a request function from library urllib to download our dataset from web."
  },
  {
    "objectID": "workshop/modules/working_with_data.html#pandas-in-python",
    "href": "workshop/modules/working_with_data.html#pandas-in-python",
    "title": "Data analysis in Python with Pandas",
    "section": "Pandas in Python",
    "text": "Pandas in Python\nThe dataset we have, is in table format. One of the best options for working with tabular data in Python is to use the Python Data Analysis Library (a.k.a. Pandas). The Pandas library provides data structures, produces high quality plots with matplotlib and integrates nicely with other libraries that use NumPy (which is another Python library) arrays.\nFirst, lets make sure the Pandas and matplotlib packages are installed.\n\n!pip install pandas matplotlib\n\nRequirement already satisfied: pandas in /home/perry/.conda/envs/python-workshop/lib/python3.10/site-packages (1.4.0)\nRequirement already satisfied: matplotlib in /home/perry/.conda/envs/python-workshop/lib/python3.10/site-packages (3.7.1)\nRequirement already satisfied: python-dateutil&gt;=2.8.1 in /home/perry/.conda/envs/python-workshop/lib/python3.10/site-packages (from pandas) (2.8.2)\nRequirement already satisfied: pytz&gt;=2020.1 in /home/perry/.conda/envs/python-workshop/lib/python3.10/site-packages (from pandas) (2023.3)\nRequirement already satisfied: numpy&gt;=1.21.0 in /home/perry/.conda/envs/python-workshop/lib/python3.10/site-packages (from pandas) (1.24.2)\nRequirement already satisfied: pillow&gt;=6.2.0 in /home/perry/.conda/envs/python-workshop/lib/python3.10/site-packages (from matplotlib) (9.4.0)\nRequirement already satisfied: contourpy&gt;=1.0.1 in /home/perry/.conda/envs/python-workshop/lib/python3.10/site-packages (from matplotlib) (1.0.7)\nRequirement already satisfied: fonttools&gt;=4.22.0 in /home/perry/.conda/envs/python-workshop/lib/python3.10/site-packages (from matplotlib) (4.39.3)\nRequirement already satisfied: kiwisolver&gt;=1.0.1 in /home/perry/.conda/envs/python-workshop/lib/python3.10/site-packages (from matplotlib) (1.4.4)\nRequirement already satisfied: cycler&gt;=0.10 in /home/perry/.conda/envs/python-workshop/lib/python3.10/site-packages (from matplotlib) (0.11.0)\nRequirement already satisfied: pyparsing&gt;=2.3.1 in /home/perry/.conda/envs/python-workshop/lib/python3.10/site-packages (from matplotlib) (3.0.9)\nRequirement already satisfied: packaging&gt;=20.0 in /home/perry/.conda/envs/python-workshop/lib/python3.10/site-packages (from matplotlib) (23.0)\nRequirement already satisfied: six&gt;=1.5 in /home/perry/.conda/envs/python-workshop/lib/python3.10/site-packages (from python-dateutil&gt;=2.8.1-&gt;pandas) (1.16.0)\n\n\nPython doesn‚Äôt load all of the libraries available to it by default. We have to add an import statement to our code in order to use library functions. To import a library, we use the syntax import libraryName. If we want to give the library a nickname to shorten the command, we can add as nickNameHere. An example of importing the pandas library using the common nickname pd is below.\n\nimport pandas as pd\n\nEach time we call a function that‚Äôs in a library, we use the syntax LibraryName.FunctionName. Adding the library name with a . before the function name tells Python where to find the function. In the example above, we have imported Pandas as pd. This means we don‚Äôt have to type out pandas each time we call a Pandas function."
  },
  {
    "objectID": "workshop/modules/working_with_data.html#so-whats-a-dataframe",
    "href": "workshop/modules/working_with_data.html#so-whats-a-dataframe",
    "title": "Data analysis in Python with Pandas",
    "section": "So What‚Äôs a DataFrame?",
    "text": "So What‚Äôs a DataFrame?\nA DataFrame is a 2-dimensional data structure that can store data of different types (including characters, integers, floating point values, factors and more) in columns. It is similar to a spreadsheet or an SQL table or the data.frame in R. A DataFrame always has an index (0-based). An index refers to the position of an element in the data structure.\n\n# Note that pd.read_csv is used because we imported pandas as pd\npd.read_csv(\"surveys.csv\")\n\n\n\n\n\n\n\n\nrecord_id\nmonth\nday\nyear\nsite_id\nspecies_id\nsex\nhindfoot_length\nweight\n\n\n\n\n0\n1\n7\n16\n1977\n2\nNL\nM\n32.0\nNaN\n\n\n1\n2\n7\n16\n1977\n3\nNL\nM\n33.0\nNaN\n\n\n2\n3\n7\n16\n1977\n2\nDM\nF\n37.0\nNaN\n\n\n3\n4\n7\n16\n1977\n7\nDM\nM\n36.0\nNaN\n\n\n4\n5\n7\n16\n1977\n3\nDM\nM\n35.0\nNaN\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n35544\n35545\n12\n31\n2002\n15\nAH\nNaN\nNaN\nNaN\n\n\n35545\n35546\n12\n31\n2002\n15\nAH\nNaN\nNaN\nNaN\n\n\n35546\n35547\n12\n31\n2002\n10\nRM\nF\n15.0\n14.0\n\n\n35547\n35548\n12\n31\n2002\n7\nDO\nM\n36.0\n51.0\n\n\n35548\n35549\n12\n31\n2002\n5\nNaN\nNaN\nNaN\nNaN\n\n\n\n\n35549 rows √ó 9 columns\n\n\n\nThe above command outputs a DateFrame object, which Jupyter displays as a table (snipped in the middle since there are many rows).\nWe can see that there were 33,549 rows parsed. Each row has 9 columns. The first column is the index of the DataFrame. The index is used to identify the position of the data, but it is not an actual column of the DataFrame. It looks like the read_csv function in Pandas read our file properly. However, we haven‚Äôt saved any data to memory so we can work with it.We need to assign the DataFrame to a variable. Remember that a variable is a name for a value, such as x, or data. We can create a new object with a variable name by assigning a value to it using =.\nLet‚Äôs call the imported survey data surveys_df:\n\nsurveys_df = pd.read_csv(\"surveys.csv\")\n\nNotice when you assign the imported DataFrame to a variable, Python does not produce any output on the screen. We can view the value of the surveys_df object by typing its name into the cell.\n\nsurveys_df\n\n\n\n\n\n\n\n\nrecord_id\nmonth\nday\nyear\nsite_id\nspecies_id\nsex\nhindfoot_length\nweight\n\n\n\n\n0\n1\n7\n16\n1977\n2\nNL\nM\n32.0\nNaN\n\n\n1\n2\n7\n16\n1977\n3\nNL\nM\n33.0\nNaN\n\n\n2\n3\n7\n16\n1977\n2\nDM\nF\n37.0\nNaN\n\n\n3\n4\n7\n16\n1977\n7\nDM\nM\n36.0\nNaN\n\n\n4\n5\n7\n16\n1977\n3\nDM\nM\n35.0\nNaN\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n35544\n35545\n12\n31\n2002\n15\nAH\nNaN\nNaN\nNaN\n\n\n35545\n35546\n12\n31\n2002\n15\nAH\nNaN\nNaN\nNaN\n\n\n35546\n35547\n12\n31\n2002\n10\nRM\nF\n15.0\n14.0\n\n\n35547\n35548\n12\n31\n2002\n7\nDO\nM\n36.0\n51.0\n\n\n35548\n35549\n12\n31\n2002\n5\nNaN\nNaN\nNaN\nNaN\n\n\n\n\n35549 rows √ó 9 columns\n\n\n\nwhich prints contents like above.\nYou can also select just a few rows, so it is easier to fit on one window, you can see that pandas has neatly formatted the data to fit our screen.\nHere, we will be using a function called head.\nThe head() function displays the first several lines of a file. It is discussed below.\n\nsurveys_df.head()\n\n\n\n\n\n\n\n\nrecord_id\nmonth\nday\nyear\nsite_id\nspecies_id\nsex\nhindfoot_length\nweight\n\n\n\n\n0\n1\n7\n16\n1977\n2\nNL\nM\n32.0\nNaN\n\n\n1\n2\n7\n16\n1977\n3\nNL\nM\n33.0\nNaN\n\n\n2\n3\n7\n16\n1977\n2\nDM\nF\n37.0\nNaN\n\n\n3\n4\n7\n16\n1977\n7\nDM\nM\n36.0\nNaN\n\n\n4\n5\n7\n16\n1977\n3\nDM\nM\n35.0\nNaN"
  },
  {
    "objectID": "workshop/modules/working_with_data.html#exploring-our-species-survey-data",
    "href": "workshop/modules/working_with_data.html#exploring-our-species-survey-data",
    "title": "Data analysis in Python with Pandas",
    "section": "Exploring Our Species Survey Data",
    "text": "Exploring Our Species Survey Data\nAgain, we can use the type function to see what kind of thing surveys_df is:\n\ntype(surveys_df)\n\npandas.core.frame.DataFrame\n\n\nAs expected, it‚Äôs a DataFrame (or, to use the full name that Python uses to refer to it internally, a pandas.core.frame.DataFrame).\nWhat kind of things does surveys_df contain? DataFrames have an attribute called dtypes that answers this:\n\nsurveys_df.dtypes\n\nrecord_id            int64\nmonth                int64\nday                  int64\nyear                 int64\nsite_id              int64\nspecies_id          object\nsex                 object\nhindfoot_length    float64\nweight             float64\ndtype: object\n\n\nAll the values in a single column have the same type. For example, months have type int64, which is a kind of integer. Cells in the month column cannot have fractional values, but the weight and hindfoot_length columns can, because they have type float64. The object type doesn‚Äôt have a very helpful name, but in this case it represents strings (such as ‚ÄòM‚Äô and ‚ÄòF‚Äô in the case of sex).\n\nUseful Ways to View DataFrame objects in Python\nThere are many ways to summarize and access the data stored in DataFrames, using attributes and methods provided by the DataFrame object.\nTo access an attribute, use the DataFrame object name followed by the attribute name df_object.attribute. Using the DataFrame surveys_df and attribute columns, an index of all the column names in the DataFrame can be accessed with surveys_df.columns.\nMethods are called in a similar fashion using the syntax df_object.method(). As an example, surveys_df.head() gets the first few rows in the DataFrame surveys_df using the head() method. With a method, we can supply extra information in the parens to control behaviour.\nLet‚Äôs look at the data using these."
  },
  {
    "objectID": "workshop/modules/working_with_data.html#challenge---dataframes",
    "href": "workshop/modules/working_with_data.html#challenge---dataframes",
    "title": "Data analysis in Python with Pandas",
    "section": "Challenge - DataFrames",
    "text": "Challenge - DataFrames\nUsing our DataFrame surveys_df, try out the attributes & methods below to see what they return.\n\nsurveys_df.columns\nsurveys_df.shape Take note of the output of shape - what format does it return the shape of the DataFrame in? HINT: More on tuples, here.\nsurveys_df.head() Also, what does surveys_df.head(15) do?\nsurveys_df.tail()"
  },
  {
    "objectID": "workshop/modules/working_with_data.html#solution---dataframes",
    "href": "workshop/modules/working_with_data.html#solution---dataframes",
    "title": "Data analysis in Python with Pandas",
    "section": "Solution - DataFrames",
    "text": "Solution - DataFrames\n‚Ä¶ try it yourself !"
  },
  {
    "objectID": "workshop/modules/working_with_data.html#challenge---statistics",
    "href": "workshop/modules/working_with_data.html#challenge---statistics",
    "title": "Data analysis in Python with Pandas",
    "section": "Challenge - Statistics",
    "text": "Challenge - Statistics\n\nCreate a list of unique site ID‚Äôs found in the surveys data. Call it site_names. How many unique sites are there in the data? How many unique species are in the data?\nWhat is the difference between len(site_names) and surveys_df['site_id'].nunique()?"
  },
  {
    "objectID": "workshop/modules/working_with_data.html#solution---statistics",
    "href": "workshop/modules/working_with_data.html#solution---statistics",
    "title": "Data analysis in Python with Pandas",
    "section": "Solution - Statistics",
    "text": "Solution - Statistics\n\nsite_names = pd.unique(surveys_df['site_id'])\nprint(len(site_names), surveys_df['site_id'].nunique())\n\n24 24"
  },
  {
    "objectID": "workshop/modules/working_with_data.html#challenge---summary-data",
    "href": "workshop/modules/working_with_data.html#challenge---summary-data",
    "title": "Data analysis in Python with Pandas",
    "section": "Challenge - Summary Data",
    "text": "Challenge - Summary Data\n\nHow many recorded individuals are female F and how many male M\n\n\n17348 and 15690\n\n\n14894 and 16476\n\n\n15303 and 16879\n\n\n15690 and 17348\n\n\nWhat happens when you group by two columns using the following syntax and then grab mean values:\n\ngrouped_data2 = surveys_df.groupby(['site_id','sex'])\ngrouped_data2.mean()\n\nSummarize weight values for each site in your data. HINT: you can use the following syntax to only create summary statistics for one column in your data by_site['weight'].describe()"
  },
  {
    "objectID": "workshop/modules/working_with_data.html#solution--summary-data",
    "href": "workshop/modules/working_with_data.html#solution--summary-data",
    "title": "Data analysis in Python with Pandas",
    "section": "Solution- Summary Data",
    "text": "Solution- Summary Data\n\n## Solution Challenge 1\ngrouped_data.count()\n\n\n\n\n\n\n\n\nrecord_id\nmonth\nday\nyear\nsite_id\nspecies_id\nhindfoot_length\nweight\n\n\nsex\n\n\n\n\n\n\n\n\n\n\n\n\nF\n15690\n15690\n15690\n15690\n15690\n15690\n14894\n15303\n\n\nM\n17348\n17348\n17348\n17348\n17348\n17348\n16476\n16879\n\n\n\n\n\n\n\n\nSolution - Challenge 2\nThe mean value for each combination of site and sex is calculated. Remark that the mean does not make sense for each variable, so you can specify this column-wise: e.g.¬†I want to know the last survey year, median foot-length and mean weight for each site/sex combination:\n\n# Solution- Challenge 3\nsurveys_df.groupby(['site_id'])['weight'].describe()\n\n\n\n\n\n\n\n\ncount\nmean\nstd\nmin\n25%\n50%\n75%\nmax\n\n\nsite_id\n\n\n\n\n\n\n\n\n\n\n\n\n1\n1903.0\n51.822911\n38.176670\n4.0\n30.0\n44.0\n53.0\n231.0\n\n\n2\n2074.0\n52.251688\n46.503602\n5.0\n24.0\n41.0\n50.0\n278.0\n\n\n3\n1710.0\n32.654386\n35.641630\n4.0\n14.0\n23.0\n36.0\n250.0\n\n\n4\n1866.0\n47.928189\n32.886598\n4.0\n30.0\n43.0\n50.0\n200.0\n\n\n5\n1092.0\n40.947802\n34.086616\n5.0\n21.0\n37.0\n48.0\n248.0\n\n\n6\n1463.0\n36.738893\n30.648310\n5.0\n18.0\n30.0\n45.0\n243.0\n\n\n7\n638.0\n20.663009\n21.315325\n4.0\n11.0\n17.0\n23.0\n235.0\n\n\n8\n1781.0\n47.758001\n33.192194\n5.0\n26.0\n44.0\n51.0\n178.0\n\n\n9\n1811.0\n51.432358\n33.724726\n6.0\n36.0\n45.0\n50.0\n275.0\n\n\n10\n279.0\n18.541219\n20.290806\n4.0\n10.0\n12.0\n21.0\n237.0\n\n\n11\n1793.0\n43.451757\n28.975514\n5.0\n26.0\n42.0\n48.0\n212.0\n\n\n12\n2219.0\n49.496169\n41.630035\n6.0\n26.0\n42.0\n50.0\n280.0\n\n\n13\n1371.0\n40.445660\n34.042767\n5.0\n20.5\n33.0\n45.0\n241.0\n\n\n14\n1728.0\n46.277199\n27.570389\n5.0\n36.0\n44.0\n49.0\n222.0\n\n\n15\n869.0\n27.042578\n35.178142\n4.0\n11.0\n18.0\n26.0\n259.0\n\n\n16\n480.0\n24.585417\n17.682334\n4.0\n12.0\n20.0\n34.0\n158.0\n\n\n17\n1893.0\n47.889593\n35.802399\n4.0\n27.0\n42.0\n50.0\n216.0\n\n\n18\n1351.0\n40.005922\n38.480856\n5.0\n17.5\n30.0\n44.0\n256.0\n\n\n19\n1084.0\n21.105166\n13.269840\n4.0\n11.0\n19.0\n27.0\n139.0\n\n\n20\n1222.0\n48.665303\n50.111539\n5.0\n17.0\n31.0\n47.0\n223.0\n\n\n21\n1029.0\n24.627794\n21.199819\n4.0\n10.0\n22.0\n31.0\n190.0\n\n\n22\n1298.0\n54.146379\n38.743967\n5.0\n29.0\n42.0\n54.0\n212.0\n\n\n23\n369.0\n19.634146\n18.382678\n4.0\n10.0\n14.0\n23.0\n199.0\n\n\n24\n960.0\n43.679167\n45.936588\n4.0\n19.0\n27.5\n45.0\n251.0"
  },
  {
    "objectID": "workshop/modules/working_with_data.html#did-you-get-3-right",
    "href": "workshop/modules/working_with_data.html#did-you-get-3-right",
    "title": "Data analysis in Python with Pandas",
    "section": "Did you get #3 right?",
    "text": "Did you get #3 right?\nA Snippet of the Output from part 3 of the challenge looks like:\n    site_id\n    1     count    1903.000000\n          mean       51.822911\n          std        38.176670\n          min         4.000000\n          25%        30.000000\n          50%        44.000000\n          75%        53.000000\n          max       231.000000\n         ..."
  },
  {
    "objectID": "workshop/modules/working_with_data.html#quickly-creating-summary-counts-in-pandas",
    "href": "workshop/modules/working_with_data.html#quickly-creating-summary-counts-in-pandas",
    "title": "Data analysis in Python with Pandas",
    "section": "Quickly Creating Summary Counts in Pandas",
    "text": "Quickly Creating Summary Counts in Pandas\nLet‚Äôs next count the number of samples for each species. We can do this in a few ways, but we‚Äôll use groupby combined with a count() method.\n\n# Count the number of samples by species\nspecies_counts = surveys_df.groupby('species_id')['record_id'].count()\nprint(species_counts)\n\nspecies_id\nAB      303\nAH      437\nAS        2\nBA       46\nCB       50\nCM       13\nCQ       16\nCS        1\nCT        1\nCU        1\nCV        1\nDM    10596\nDO     3027\nDS     2504\nDX       40\nNL     1252\nOL     1006\nOT     2249\nOX       12\nPB     2891\nPC       39\nPE     1299\nPF     1597\nPG        8\nPH       32\nPI        9\nPL       36\nPM      899\nPP     3123\nPU        5\nPX        6\nRF       75\nRM     2609\nRO        8\nRX        2\nSA       75\nSC        1\nSF       43\nSH      147\nSO       43\nSS      248\nST        1\nSU        5\nUL        4\nUP        8\nUR       10\nUS        4\nZL        2\nName: record_id, dtype: int64\n\n\nOr, we can also count just the rows that have the species ‚ÄúDO‚Äù:\n\nsurveys_df.groupby('species_id')['record_id'].count()['DO']\n\n3027"
  },
  {
    "objectID": "workshop/modules/working_with_data.html#basic-math-functions",
    "href": "workshop/modules/working_with_data.html#basic-math-functions",
    "title": "Data analysis in Python with Pandas",
    "section": "Basic Math Functions",
    "text": "Basic Math Functions\nIf we wanted to, we could perform math on an entire column of our data. For example let‚Äôs multiply all weight values by 2. A more practical use of this might be to normalize the data according to a mean, area, or some other value calculated from our data.\n\n# Multiply all weight values by 2 but does not change the original weight data\nsurveys_df['weight']*2\n\n0          NaN\n1          NaN\n2          NaN\n3          NaN\n4          NaN\n         ...  \n35544      NaN\n35545      NaN\n35546     28.0\n35547    102.0\n35548      NaN\nName: weight, Length: 35549, dtype: float64"
  },
  {
    "objectID": "workshop/modules/working_with_data.html#quick-easy-plotting-data-using-pandas",
    "href": "workshop/modules/working_with_data.html#quick-easy-plotting-data-using-pandas",
    "title": "Data analysis in Python with Pandas",
    "section": "Quick & Easy Plotting Data Using Pandas",
    "text": "Quick & Easy Plotting Data Using Pandas\nWe can plot our summary stats using Pandas, too.\n\n## To make sure figures appear inside Jupyter Notebook\n%matplotlib inline\n\n# Create a quick bar chart\nspecies_counts.plot(kind='bar')\n\n&lt;Axes: xlabel='species_id'&gt;\n\n\n\n\n\n\nAnimals per site plot\nWe can also look at how many animals were captured in each site.\n\ntotal_count = surveys_df.groupby('site_id')['record_id'].nunique()\n# Let's plot that too\ntotal_count.plot(kind='bar')\n\n&lt;Axes: xlabel='site_id'&gt;"
  },
  {
    "objectID": "workshop/modules/working_with_data.html#extra-plotting-challenge",
    "href": "workshop/modules/working_with_data.html#extra-plotting-challenge",
    "title": "Data analysis in Python with Pandas",
    "section": "Extra Plotting Challenge",
    "text": "Extra Plotting Challenge\n\nCreate a plot of average weight across all species per plot.\nCreate a plot of total males versus total females for the entire dataset.\nCreate a stacked bar plot, with weight on the Y axis, and the stacked variable being sex. The plot should show total weight by sex for each plot. Some tips are below to help you solve this challenge: For more on Pandas plots, visit this link.\n\n\nSolution to Extra Plotting Challenge 1\n\n## Solution Plotting Challenge 1\nsurveys_df.groupby('site_id').mean()[\"weight\"].plot(kind='bar')\n\n&lt;Axes: xlabel='site_id'&gt;\n\n\n\n\n\n\n\nSolution to Extra Plotting Challenge 2\n\n# Solution Plotting Challenge 2\n## Create plot of total males versus total females for the entire dataset.\n\nsurveys_df.groupby('sex').count()[\"record_id\"].plot(kind='bar')\n\n&lt;Axes: xlabel='sex'&gt;\n\n\n\n\n\n\n\nSolution to Extra Plotting Challenge 3\nFirst we group data by site and by sex, and then calculate a total for each site.\n\nby_site_sex = surveys_df.groupby(['site_id','sex'])\nsite_sex_count = by_site_sex['weight'].sum()\n\nThis calculates the sums of weights for each sex within each plot as a table\nsite  sex\nsite_id  sex\n1        F      38253\n         M      59979\n2        F      50144\n         M      57250\n3        F      27251\n         M      28253\n4        F      39796\n         M      49377\n&lt;other sites removed for brevity&gt;\nBelow we‚Äôll use .unstack() on our grouped data to figure out the total weight that each sex contributed to each plot.\n\nby_site_sex = surveys_df.groupby(['site_id','sex'])\nsite_sex_count = by_site_sex['weight'].sum()\nsite_sex_count.unstack()\n\n\n\n\n\n\n\nsex\nF\nM\n\n\nsite_id\n\n\n\n\n\n\n1\n38253.0\n59979.0\n\n\n2\n50144.0\n57250.0\n\n\n3\n27251.0\n28253.0\n\n\n4\n39796.0\n49377.0\n\n\n5\n21143.0\n23326.0\n\n\n6\n26210.0\n27245.0\n\n\n7\n6522.0\n6422.0\n\n\n8\n37274.0\n47755.0\n\n\n9\n44128.0\n48727.0\n\n\n10\n2359.0\n2776.0\n\n\n11\n34638.0\n43106.0\n\n\n12\n51825.0\n57420.0\n\n\n13\n24720.0\n30354.0\n\n\n14\n32770.0\n46469.0\n\n\n15\n12455.0\n11037.0\n\n\n16\n5446.0\n6310.0\n\n\n17\n42106.0\n48082.0\n\n\n18\n27353.0\n26433.0\n\n\n19\n11297.0\n11514.0\n\n\n20\n33206.0\n25988.0\n\n\n21\n15481.0\n9815.0\n\n\n22\n34656.0\n35363.0\n\n\n23\n3352.0\n3883.0\n\n\n24\n22951.0\n18835.0\n\n\n\n\n\n\n\nNow, create a stacked bar plot with that data where the weights for each sex are stacked by plot.\nRather than display it as a table, we can plot the above data by stacking the values of each sex as follows:\n\nby_site_sex = surveys_df.groupby(['site_id', 'sex'])\nsite_sex_count = by_site_sex['weight'].sum()\nspc = site_sex_count.unstack()\ns_plot = spc.plot(kind='bar', stacked=True, title=\"Total weight by site and sex\")\ns_plot.set_ylabel(\"Weight\")\ns_plot.set_xlabel(\"Site\")\n\nText(0.5, 0, 'Site')"
  },
  {
    "objectID": "workshop/modules/indexing.html",
    "href": "workshop/modules/indexing.html",
    "title": "Indexing and Slicing",
    "section": "",
    "text": "Estimated teaching time: 30 min\nEstimated challenge time: 30 min\nKey questions:\nLearning objectives:\nIn this lesson, we will explore ways to access different parts of the data in a Pandas DataFrame using:"
  },
  {
    "objectID": "workshop/modules/indexing.html#ensure-the-pandas-package-is-installed",
    "href": "workshop/modules/indexing.html#ensure-the-pandas-package-is-installed",
    "title": "Indexing and Slicing",
    "section": "Ensure the Pandas package is installed",
    "text": "Ensure the Pandas package is installed\n\n!pip install pandas matplotlib\n\nRequirement already satisfied: pandas in /home/perry/.conda/envs/python-workshop/lib/python3.10/site-packages (1.4.0)\nRequirement already satisfied: matplotlib in /home/perry/.conda/envs/python-workshop/lib/python3.10/site-packages (3.7.1)\nRequirement already satisfied: python-dateutil&gt;=2.8.1 in /home/perry/.conda/envs/python-workshop/lib/python3.10/site-packages (from pandas) (2.8.2)\nRequirement already satisfied: pytz&gt;=2020.1 in /home/perry/.conda/envs/python-workshop/lib/python3.10/site-packages (from pandas) (2023.3)\nRequirement already satisfied: numpy&gt;=1.21.0 in /home/perry/.conda/envs/python-workshop/lib/python3.10/site-packages (from pandas) (1.24.2)\nRequirement already satisfied: pillow&gt;=6.2.0 in /home/perry/.conda/envs/python-workshop/lib/python3.10/site-packages (from matplotlib) (9.4.0)\nRequirement already satisfied: kiwisolver&gt;=1.0.1 in /home/perry/.conda/envs/python-workshop/lib/python3.10/site-packages (from matplotlib) (1.4.4)\nRequirement already satisfied: cycler&gt;=0.10 in /home/perry/.conda/envs/python-workshop/lib/python3.10/site-packages (from matplotlib) (0.11.0)\nRequirement already satisfied: fonttools&gt;=4.22.0 in /home/perry/.conda/envs/python-workshop/lib/python3.10/site-packages (from matplotlib) (4.39.3)\nRequirement already satisfied: contourpy&gt;=1.0.1 in /home/perry/.conda/envs/python-workshop/lib/python3.10/site-packages (from matplotlib) (1.0.7)\nRequirement already satisfied: pyparsing&gt;=2.3.1 in /home/perry/.conda/envs/python-workshop/lib/python3.10/site-packages (from matplotlib) (3.0.9)\nRequirement already satisfied: packaging&gt;=20.0 in /home/perry/.conda/envs/python-workshop/lib/python3.10/site-packages (from matplotlib) (23.0)\nRequirement already satisfied: six&gt;=1.5 in /home/perry/.conda/envs/python-workshop/lib/python3.10/site-packages (from python-dateutil&gt;=2.8.1-&gt;pandas) (1.16.0)"
  },
  {
    "objectID": "workshop/modules/indexing.html#loading-our-data",
    "href": "workshop/modules/indexing.html#loading-our-data",
    "title": "Indexing and Slicing",
    "section": "Loading our data",
    "text": "Loading our data\nWe will continue to use the surveys dataset that we worked with in the last lesson. Let‚Äôs reopen and read in the data again:\n\n# Make sure pandas is loaded\nimport pandas as pd\n\n# Read in the survey CSV\nsurveys_df = pd.read_csv(\"surveys.csv\")"
  },
  {
    "objectID": "workshop/modules/indexing.html#indexing-and-slicing-in-python",
    "href": "workshop/modules/indexing.html#indexing-and-slicing-in-python",
    "title": "Indexing and Slicing",
    "section": "Indexing and Slicing in Python",
    "text": "Indexing and Slicing in Python\nWe often want to work with subsets of a DataFrame object. There are different ways to accomplish this including: using labels (column headings), numeric ranges, or specific x,y index locations."
  },
  {
    "objectID": "workshop/modules/indexing.html#selecting-data-using-labels-column-headings",
    "href": "workshop/modules/indexing.html#selecting-data-using-labels-column-headings",
    "title": "Indexing and Slicing",
    "section": "Selecting data using Labels (Column Headings)",
    "text": "Selecting data using Labels (Column Headings)\nWe use square brackets [] to select a subset of an Python object. For example, we can select all data from a column named species_id from the surveys_df DataFrame by name. There are two ways to do this:\n\n# Method 1: select a 'subset' of the data using the column name\nsurveys_df['species_id'].head()\n\n0    NL\n1    NL\n2    DM\n3    DM\n4    DM\nName: species_id, dtype: object\n\n\n\n# Method 2: use the column name as an 'attribute'; gives the same output\nsurveys_df.species_id.head()\n\n0    NL\n1    NL\n2    DM\n3    DM\n4    DM\nName: species_id, dtype: object\n\n\nWe can also create a new object that contains only the data within the species_id column as follows:\n\n# Creates an object, surveys_species, that only contains the `species_id` column\nsurveys_species = surveys_df['species_id']\n\nWe can pass a list of column names too, as an index to select columns in that order. This is useful when we need to reorganize our data.\nNOTE: If a column name is not contained in the DataFrame, an exception (error) will be raised.\n\n# Select the species and plot columns from the DataFrame\nsurveys_df[['species_id', 'site_id']].head()\n\n\n\n\n\n\n\n\nspecies_id\nsite_id\n\n\n\n\n0\nNL\n2\n\n\n1\nNL\n3\n\n\n2\nDM\n2\n\n\n3\nDM\n7\n\n\n4\nDM\n3\n\n\n\n\n\n\n\nWhat happens if you ask for a column that doesn‚Äôt exist?\nsurveys_df['speciess']\nOutputs:\n---------------------------------------------------------------------------\nKeyError                                  Traceback (most recent call last)\n/Applications/anaconda/lib/python3.6/site-packages/pandas/core/indexes/base.py in get_loc(self, key, method, tolerance)\n   2392             try:\n-&gt; 2393                 return self._engine.get_loc(key)\n   2394             except KeyError:\n\npandas/_libs/index.pyx in pandas._libs.index.IndexEngine.get_loc (pandas/_libs/index.c:5239)()\n\npandas/_libs/index.pyx in pandas._libs.index.IndexEngine.get_loc (pandas/_libs/index.c:5085)()\n\npandas/_libs/hashtable_class_helper.pxi in pandas._libs.hashtable.PyObjectHashTable.get_item (pandas/_libs/hashtable.c:20405)()\n\npandas/_libs/hashtable_class_helper.pxi in pandas._libs.hashtable.PyObjectHashTable.get_item (pandas/_libs/hashtable.c:20359)()\n\nKeyError: 'speciess'\n\nDuring handling of the above exception, another exception occurred:\n\nKeyError                                  Traceback (most recent call last)\n&lt;ipython-input-7-7d65fa0158b8&gt; in &lt;module&gt;()\n      1 \n      2 # What happens if you ask for a column that doesn't exist?\n----&gt; 3 surveys_df['speciess']\n      4 \n\n/Applications/anaconda/lib/python3.6/site-packages/pandas/core/frame.py in __getitem__(self, key)\n   2060             return self._getitem_multilevel(key)\n   2061         else:\n-&gt; 2062             return self._getitem_column(key)\n   2063 \n   2064     def _getitem_column(self, key):\n\n/Applications/anaconda/lib/python3.6/site-packages/pandas/core/frame.py in _getitem_column(self, key)\n   2067         # get column\n   2068         if self.columns.is_unique:\n-&gt; 2069             return self._get_item_cache(key)\n   2070 \n   2071         # duplicate columns & possible reduce dimensionality\n\n/Applications/anaconda/lib/python3.6/site-packages/pandas/core/generic.py in _get_item_cache(self, item)\n   1532         res = cache.get(item)\n   1533         if res is None:\n-&gt; 1534             values = self._data.get(item)\n   1535             res = self._box_item_values(item, values)\n   1536             cache[item] = res\n\n/Applications/anaconda/lib/python3.6/site-packages/pandas/core/internals.py in get(self, item, fastpath)\n   3588 \n   3589             if not isnull(item):\n-&gt; 3590                 loc = self.items.get_loc(item)\n   3591             else:\n   3592                 indexer = np.arange(len(self.items))[isnull(self.items)]\n\n/Applications/anaconda/lib/python3.6/site-packages/pandas/core/indexes/base.py in get_loc(self, key, method, tolerance)\n   2393                 return self._engine.get_loc(key)\n   2394             except KeyError:\n-&gt; 2395                 return self._engine.get_loc(self._maybe_cast_indexer(key))\n   2396 \n   2397         indexer = self.get_indexer([key], method=method, tolerance=tolerance)\n\npandas/_libs/index.pyx in pandas._libs.index.IndexEngine.get_loc (pandas/_libs/index.c:5239)()\n\npandas/_libs/index.pyx in pandas._libs.index.IndexEngine.get_loc (pandas/_libs/index.c:5085)()\n\npandas/_libs/hashtable_class_helper.pxi in pandas._libs.hashtable.PyObjectHashTable.get_item (pandas/_libs/hashtable.c:20405)()\n\npandas/_libs/hashtable_class_helper.pxi in pandas._libs.hashtable.PyObjectHashTable.get_item (pandas/_libs/hashtable.c:20359)()\n\nKeyError: 'speciess'\nPython tells us what type of error it is in the traceback, at the bottom it says KeyError: 'speciess' which means that speciess is not a column name (or Key in the related python data type dictionary).\n\n# What happens when you flip the order?\nsurveys_df[['site_id', 'species_id']].head()\n\n\n\n\n\n\n\n\nsite_id\nspecies_id\n\n\n\n\n0\n2\nNL\n\n\n1\n3\nNL\n\n\n2\n2\nDM\n\n\n3\n7\nDM\n\n\n4\n3\nDM"
  },
  {
    "objectID": "workshop/modules/indexing.html#extracting-range-based-subsets-slicing",
    "href": "workshop/modules/indexing.html#extracting-range-based-subsets-slicing",
    "title": "Indexing and Slicing",
    "section": "Extracting Range based Subsets: Slicing",
    "text": "Extracting Range based Subsets: Slicing\nREMINDER: Python Uses 0-based Indexing\nLet‚Äôs remind ourselves that Python uses 0-based indexing. This means that the first element in an object is located at position 0. This is different from other tools like R and Matlab that index elements within objects starting at 1.\n\n# Create a list of numbers:\na = [1, 2, 3, 4, 5]"
  },
  {
    "objectID": "workshop/modules/indexing.html#challenge---extracting-data",
    "href": "workshop/modules/indexing.html#challenge---extracting-data",
    "title": "Indexing and Slicing",
    "section": "Challenge - Extracting data",
    "text": "Challenge - Extracting data\n\nWhat value does the code a[0] return?\nHow about this: a[5]\nIn the example above, calling a[5] returns an error. Why is that?\nWhat about a[len(a)] ?"
  },
  {
    "objectID": "workshop/modules/indexing.html#solutions---extracting-data",
    "href": "workshop/modules/indexing.html#solutions---extracting-data",
    "title": "Indexing and Slicing",
    "section": "Solutions - Extracting data",
    "text": "Solutions - Extracting data\n\na[0]\n\n1\n\n\n\n# Solution #2\n# a[5]\n\n\nSolution #2\nIn above example, the error says list index out of range. This means we don‚Äôt have index 5 in our list. The maximum index for a is 4, as indexing starts at 0.\n\n# Solution #3\n# a[len(a)]\n\n\n\nSolution - # 4 - Extracting data\nThis also gives an error, because len(a) is 5 which is not the maximum index"
  },
  {
    "objectID": "workshop/modules/indexing.html#slicing-subsets-of-rows-in-python",
    "href": "workshop/modules/indexing.html#slicing-subsets-of-rows-in-python",
    "title": "Indexing and Slicing",
    "section": "Slicing Subsets of Rows in Python",
    "text": "Slicing Subsets of Rows in Python\nSlicing using the [] operator selects a set of rows and/or columns from a DataFrame. To slice out a set of rows, you use the following syntax: data[start:stop]. When slicing in pandas the start bound is included in the output. The stop bound is one step BEYOND the row you want to select. So if you want to select rows 0, 1 and 2 your code would look like this with our surveys data:\n\n# Select rows 0, 1, 2 (row 3 is not selected)\nsurveys_df[0:3]\n\n\n\n\n\n\n\n\nrecord_id\nmonth\nday\nyear\nsite_id\nspecies_id\nsex\nhindfoot_length\nweight\n\n\n\n\n0\n1\n7\n16\n1977\n2\nNL\nM\n32.0\nNaN\n\n\n1\n2\n7\n16\n1977\n3\nNL\nM\n33.0\nNaN\n\n\n2\n3\n7\n16\n1977\n2\nDM\nF\n37.0\nNaN\n\n\n\n\n\n\n\nThe stop bound in Python is different from what you might be used to in languages like Matlab and R.\nNow lets select the first 5 rows (rows 0, 1, 2, 3, 4).\n\nsurveys_df[:5]\n\n\n\n\n\n\n\n\nrecord_id\nmonth\nday\nyear\nsite_id\nspecies_id\nsex\nhindfoot_length\nweight\n\n\n\n\n0\n1\n7\n16\n1977\n2\nNL\nM\n32.0\nNaN\n\n\n1\n2\n7\n16\n1977\n3\nNL\nM\n33.0\nNaN\n\n\n2\n3\n7\n16\n1977\n2\nDM\nF\n37.0\nNaN\n\n\n3\n4\n7\n16\n1977\n7\nDM\nM\n36.0\nNaN\n\n\n4\n5\n7\n16\n1977\n3\nDM\nM\n35.0\nNaN\n\n\n\n\n\n\n\n\n# Select the last element in the list\n# (the slice starts at the last element, and ends at the end of the list)\nsurveys_df[-1:]\n\n\n\n\n\n\n\n\nrecord_id\nmonth\nday\nyear\nsite_id\nspecies_id\nsex\nhindfoot_length\nweight\n\n\n\n\n35548\n35549\n12\n31\n2002\n5\nNaN\nNaN\nNaN\nNaN\n\n\n\n\n\n\n\nWe can also reassign values within subsets of our DataFrame.\nLet‚Äôs create a brand new clean dataframe from the original data CSV file.\n\nsurveys_df = pd.read_csv(\"surveys.csv\")"
  },
  {
    "objectID": "workshop/modules/indexing.html#slicing-subsets-of-rows-and-columns-in-python",
    "href": "workshop/modules/indexing.html#slicing-subsets-of-rows-and-columns-in-python",
    "title": "Indexing and Slicing",
    "section": "Slicing Subsets of Rows and Columns in Python",
    "text": "Slicing Subsets of Rows and Columns in Python\nWe can select specific ranges of our data in both the row and column directions using either label or integer-based indexing.\n\nloc is primarily label based indexing. Integers may be used but they are interpreted as a label.\niloc is primarily integer based indexing\n\nTo select a subset of rows and columns from our DataFrame, we can use the iloc method. For example, we can select month, day and year (columns 2, 3 and 4 if we start counting at 1), like this:\niloc[row slicing, column slicing]\n\nsurveys_df.iloc[0:3, 1:4]\n\n\n\n\n\n\n\n\nmonth\nday\nyear\n\n\n\n\n0\n7\n16\n1977\n\n\n1\n7\n16\n1977\n\n\n2\n7\n16\n1977\n\n\n\n\n\n\n\nNotice that we asked for a slice from 0:3. This yielded 3 rows of data. When you ask for 0:3, you are actually telling Python to start at index 0 and select rows 0, 1, 2 up to but not including 3.\nLet‚Äôs explore some other ways to index and select subsets of data:\n\n# Select all columns for rows of index values 0 and 10\nsurveys_df.loc[[0, 10], :]\n\n\n\n\n\n\n\n\nrecord_id\nmonth\nday\nyear\nsite_id\nspecies_id\nsex\nhindfoot_length\nweight\n\n\n\n\n0\n1\n7\n16\n1977\n2\nNL\nM\n32.0\nNaN\n\n\n10\n11\n7\n16\n1977\n5\nDS\nF\n53.0\nNaN\n\n\n\n\n\n\n\n\n# What does this do?\nsurveys_df.loc[0, ['species_id', 'site_id', 'weight']]\n\nspecies_id     NL\nsite_id         2\nweight        NaN\nName: 0, dtype: object\n\n\n\n# What happens when you uncomment and run the code below?\n# surveys_df.loc[[0, 10, 35549], :]\n\nNOTE: Labels must be found in the DataFrame or you will get a KeyError.\nIndexing by labels loc differs from indexing by integers iloc. With loc, the both start bound and the stop bound are inclusive. When using loc, integers can be used, but the integers refer to the index label and not the position. For example, using loc and select 1:4 will get a different result than using iloc to select rows 1:4.\nWe can also select a specific data value using a row and column location within the DataFrame and iloc indexing:\n# Syntax for iloc indexing to finding a specific data element\ndat.iloc[row, column]\nIn following iloc example:\n\nsurveys_df.iloc[2, 6]\n\n'F'\n\n\nRemember that Python indexing begins at 0. So, the index location [2, 6] selects the element that is 3 rows down and 7 columns over in the DataFrame."
  },
  {
    "objectID": "workshop/modules/indexing.html#challenge---range",
    "href": "workshop/modules/indexing.html#challenge---range",
    "title": "Indexing and Slicing",
    "section": "Challenge - Range",
    "text": "Challenge - Range\n\nWhat happens when you execute:\n- `surveys_df[0:1]`\n- `surveys_df[:4]`\n- `surveys_df[:-1]`\nWhat happens when you call:\n- `surveys_df.iloc[0:4, 1:4]`"
  },
  {
    "objectID": "workshop/modules/indexing.html#solution---range",
    "href": "workshop/modules/indexing.html#solution---range",
    "title": "Indexing and Slicing",
    "section": "Solution - Range",
    "text": "Solution - Range\n\n# Solution - Range - #1 (a)\nsurveys_df[0:1]\n\n\n\n\n\n\n\n\nrecord_id\nmonth\nday\nyear\nsite_id\nspecies_id\nsex\nhindfoot_length\nweight\n\n\n\n\n0\n1\n7\n16\n1977\n2\nNL\nM\n32.0\nNaN\n\n\n\n\n\n\n\n\n# Solution - Range - #1 (b)\nsurveys_df[:4]\n\n\n\n\n\n\n\n\nrecord_id\nmonth\nday\nyear\nsite_id\nspecies_id\nsex\nhindfoot_length\nweight\n\n\n\n\n0\n1\n7\n16\n1977\n2\nNL\nM\n32.0\nNaN\n\n\n1\n2\n7\n16\n1977\n3\nNL\nM\n33.0\nNaN\n\n\n2\n3\n7\n16\n1977\n2\nDM\nF\n37.0\nNaN\n\n\n3\n4\n7\n16\n1977\n7\nDM\nM\n36.0\nNaN\n\n\n\n\n\n\n\n\n# Solution - Range - #1 (c)\nsurveys_df[:-1]\n\n\n\n\n\n\n\n\nrecord_id\nmonth\nday\nyear\nsite_id\nspecies_id\nsex\nhindfoot_length\nweight\n\n\n\n\n0\n1\n7\n16\n1977\n2\nNL\nM\n32.0\nNaN\n\n\n1\n2\n7\n16\n1977\n3\nNL\nM\n33.0\nNaN\n\n\n2\n3\n7\n16\n1977\n2\nDM\nF\n37.0\nNaN\n\n\n3\n4\n7\n16\n1977\n7\nDM\nM\n36.0\nNaN\n\n\n4\n5\n7\n16\n1977\n3\nDM\nM\n35.0\nNaN\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n35543\n35544\n12\n31\n2002\n15\nUS\nNaN\nNaN\nNaN\n\n\n35544\n35545\n12\n31\n2002\n15\nAH\nNaN\nNaN\nNaN\n\n\n35545\n35546\n12\n31\n2002\n15\nAH\nNaN\nNaN\nNaN\n\n\n35546\n35547\n12\n31\n2002\n10\nRM\nF\n15.0\n14.0\n\n\n35547\n35548\n12\n31\n2002\n7\nDO\nM\n36.0\n51.0\n\n\n\n\n35548 rows √ó 9 columns\n\n\n\n\n# Solution - Range - #2\nsurveys_df.iloc[0:4, 1:4]\n\n\n\n\n\n\n\n\nmonth\nday\nyear\n\n\n\n\n0\n7\n16\n1977\n\n\n1\n7\n16\n1977\n\n\n2\n7\n16\n1977\n\n\n3\n7\n16\n1977"
  },
  {
    "objectID": "workshop/modules/indexing.html#subsetting-data-using-criteria",
    "href": "workshop/modules/indexing.html#subsetting-data-using-criteria",
    "title": "Indexing and Slicing",
    "section": "Subsetting Data using Criteria",
    "text": "Subsetting Data using Criteria\nWe can also select a subset of our data using criteria. For example, we can select all rows that have a year value of 2002:\n\nsurveys_df[surveys_df.year == 2002].head()\n\n\n\n\n\n\n\n\nrecord_id\nmonth\nday\nyear\nsite_id\nspecies_id\nsex\nhindfoot_length\nweight\n\n\n\n\n33320\n33321\n1\n12\n2002\n1\nDM\nM\n38.0\n44.0\n\n\n33321\n33322\n1\n12\n2002\n1\nDO\nM\n37.0\n58.0\n\n\n33322\n33323\n1\n12\n2002\n1\nPB\nM\n28.0\n45.0\n\n\n33323\n33324\n1\n12\n2002\n1\nAB\nNaN\nNaN\nNaN\n\n\n33324\n33325\n1\n12\n2002\n1\nDO\nM\n35.0\n29.0\n\n\n\n\n\n\n\nOr we can select all rows that do not contain the year 2002:\n\nsurveys_df[surveys_df.year != 2002]\n\n\n\n\n\n\n\n\nrecord_id\nmonth\nday\nyear\nsite_id\nspecies_id\nsex\nhindfoot_length\nweight\n\n\n\n\n0\n1\n7\n16\n1977\n2\nNL\nM\n32.0\nNaN\n\n\n1\n2\n7\n16\n1977\n3\nNL\nM\n33.0\nNaN\n\n\n2\n3\n7\n16\n1977\n2\nDM\nF\n37.0\nNaN\n\n\n3\n4\n7\n16\n1977\n7\nDM\nM\n36.0\nNaN\n\n\n4\n5\n7\n16\n1977\n3\nDM\nM\n35.0\nNaN\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n33315\n33316\n12\n16\n2001\n11\nNaN\nNaN\nNaN\nNaN\n\n\n33316\n33317\n12\n16\n2001\n13\nNaN\nNaN\nNaN\nNaN\n\n\n33317\n33318\n12\n16\n2001\n14\nNaN\nNaN\nNaN\nNaN\n\n\n33318\n33319\n12\n16\n2001\n15\nNaN\nNaN\nNaN\nNaN\n\n\n33319\n33320\n12\n16\n2001\n16\nNaN\nNaN\nNaN\nNaN\n\n\n\n\n33320 rows √ó 9 columns\n\n\n\nWe can define sets of criteria too:\n\nsurveys_df[(surveys_df.year &gt;= 1980) & (surveys_df.year &lt;= 1985)]\n\n\n\n\n\n\n\n\nrecord_id\nmonth\nday\nyear\nsite_id\nspecies_id\nsex\nhindfoot_length\nweight\n\n\n\n\n2270\n2271\n1\n15\n1980\n8\nDO\nM\n35.0\n53.0\n\n\n2271\n2272\n1\n15\n1980\n11\nPF\nF\n16.0\n10.0\n\n\n2272\n2273\n1\n15\n1980\n18\nDM\nF\n34.0\n33.0\n\n\n2273\n2274\n1\n15\n1980\n11\nDM\nM\n38.0\n37.0\n\n\n2274\n2275\n1\n15\n1980\n8\nDO\nF\n33.0\n29.0\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n11222\n11223\n12\n8\n1985\n4\nDM\nM\n36.0\n40.0\n\n\n11223\n11224\n12\n8\n1985\n11\nDM\nM\n37.0\n49.0\n\n\n11224\n11225\n12\n8\n1985\n7\nPE\nM\n20.0\n18.0\n\n\n11225\n11226\n12\n8\n1985\n1\nDM\nM\n38.0\n47.0\n\n\n11226\n11227\n12\n8\n1985\n15\nNaN\nNaN\nNaN\nNaN\n\n\n\n\n8957 rows √ó 9 columns\n\n\n\n\nPython Syntax Cheat Sheet\nUse can use the syntax below when querying data by criteria from a DataFrame. Experiment with selecting various subsets of the ‚Äúsurveys‚Äù data.\n\nEquals: ==\nNot equals: !=\nGreater than, less than: &gt; or &lt;\nGreater than or equal to &gt;=\nLess than or equal to &lt;="
  },
  {
    "objectID": "workshop/modules/indexing.html#challenge---queries",
    "href": "workshop/modules/indexing.html#challenge---queries",
    "title": "Indexing and Slicing",
    "section": "Challenge - Queries",
    "text": "Challenge - Queries\n\nSelect a subset of rows in the surveys_df DataFrame that contain data from the year 1999 and that contain weight values less than or equal to 8. How many rows did you end up with? What did your neighbor get?\n(Extra) Use the isin function to find all plots that contain PB and PL species in the ‚Äúsurveys‚Äù DataFrame. How many records contain these values?\n\nYou can use the isin command in Python to query a DataFrame based upon a list of values as follows:\nsurveys_df[surveys_df['species_id'].isin([listGoesHere])]"
  },
  {
    "objectID": "workshop/modules/indexing.html#solution---queries",
    "href": "workshop/modules/indexing.html#solution---queries",
    "title": "Indexing and Slicing",
    "section": "Solution - Queries",
    "text": "Solution - Queries\n\n## Solution - Queries #1\nsurveys_df[(surveys_df[\"year\"] == 1999) & (surveys_df[\"weight\"] &lt;= 8)]\n\n\n\n\n\n\n\n\nrecord_id\nmonth\nday\nyear\nsite_id\nspecies_id\nsex\nhindfoot_length\nweight\n\n\n\n\n29082\n29083\n1\n16\n1999\n21\nRM\nM\n16.0\n8.0\n\n\n29196\n29197\n2\n20\n1999\n18\nRM\nM\n18.0\n8.0\n\n\n29421\n29422\n3\n15\n1999\n16\nRM\nM\n15.0\n8.0\n\n\n29903\n29904\n10\n10\n1999\n4\nPP\nM\n20.0\n7.0\n\n\n29905\n29906\n10\n10\n1999\n4\nPP\nM\n21.0\n4.0\n\n\n\n\n\n\n\n\n# when only interested in how many, the sum of True values could be used as well: \nsum((surveys_df[\"year\"] == 1999) & (surveys_df[\"weight\"] &lt;= 8))\n\n5\n\n\n\n# Solution - Queries #2\nsurveys_df[surveys_df['species_id'].isin(['PB', 'PL'])]['site_id'].unique()\n\narray([ 1, 10,  6, 24,  2, 23, 19, 12, 20, 22,  3,  9, 14, 13, 21,  7, 11,\n       15,  4, 16, 17,  8, 18,  5])\n\n\n\n# To get number of records\nsurveys_df[surveys_df['species_id'].isin(['PB', 'PL'])].shape\n\n(2927, 9)"
  },
  {
    "objectID": "workshop/modules/indexing.html#extra-challenges",
    "href": "workshop/modules/indexing.html#extra-challenges",
    "title": "Indexing and Slicing",
    "section": "Extra Challenges",
    "text": "Extra Challenges\n\n(Extra) Create a query that finds all rows with a weight value greater than (&gt;) or equal to 0.\n(Extra) The ~ symbol in Python can be used to return the OPPOSITE of the selection that you specify in Python. It is equivalent to is not in. Write a query that selects all rows with sex NOT equal to ‚ÄòM‚Äô or ‚ÄòF‚Äô in the ‚Äúsurveys‚Äù data.\n\n\nsum(surveys_df[\"weight\"]&gt;=0)\n\n32283\n\n\n\nsurveys_df[~surveys_df[\"sex\"].isin(['M', 'F'])]\n\n\n\n\n\n\n\n\nrecord_id\nmonth\nday\nyear\nsite_id\nspecies_id\nsex\nhindfoot_length\nweight\n\n\n\n\n13\n14\n7\n16\n1977\n8\nDM\nNaN\nNaN\nNaN\n\n\n18\n19\n7\n16\n1977\n4\nPF\nNaN\nNaN\nNaN\n\n\n33\n34\n7\n17\n1977\n17\nDM\nNaN\nNaN\nNaN\n\n\n56\n57\n7\n18\n1977\n22\nDM\nNaN\nNaN\nNaN\n\n\n76\n77\n8\n19\n1977\n4\nSS\nNaN\nNaN\nNaN\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n35527\n35528\n12\n31\n2002\n13\nUS\nNaN\nNaN\nNaN\n\n\n35543\n35544\n12\n31\n2002\n15\nUS\nNaN\nNaN\nNaN\n\n\n35544\n35545\n12\n31\n2002\n15\nAH\nNaN\nNaN\nNaN\n\n\n35545\n35546\n12\n31\n2002\n15\nAH\nNaN\nNaN\nNaN\n\n\n35548\n35549\n12\n31\n2002\n5\nNaN\nNaN\nNaN\nNaN\n\n\n\n\n2511 rows √ó 9 columns"
  },
  {
    "objectID": "workshop/modules/indexing.html#extra-challenges---putting-it-all-together",
    "href": "workshop/modules/indexing.html#extra-challenges---putting-it-all-together",
    "title": "Indexing and Slicing",
    "section": "Extra Challenges - Putting it all together",
    "text": "Extra Challenges - Putting it all together\n\nCreate a new DataFrame that only contains observations with sex values that are not female or male. Assign each sex value in the new DataFrame to a new value of ‚Äòx‚Äô. Determine the number of null values in the subset.\nCreate a new DataFrame that contains only observations that are of sex male or female and where weight values are greater than 0. Create a stacked bar plot of average weight by plot with male vs female values stacked for each plot.\nCount the number of missing values per column. Hint: The method .count() gives you the number of non-NA observations per column."
  },
  {
    "objectID": "workshop/modules/indexing.html#solution-extra-challenges",
    "href": "workshop/modules/indexing.html#solution-extra-challenges",
    "title": "Indexing and Slicing",
    "section": "Solution Extra Challenges",
    "text": "Solution Extra Challenges\n\n# Solution extra challenge 1\nnew = surveys_df[~surveys_df['sex'].isin(['M', 'F'])].copy()\nnew['sex']='x'\nprint(len(new))\n\n2511\n\n\n\n# We can verify the number of NaN values with\nsum(surveys_df['sex'].isnull())\n\n2511\n\n\n\n# Solution extra challenge 2\n\n# selection of the data with isin\nstack_selection = surveys_df[(surveys_df['sex'].isin(['M', 'F'])) &\n                            surveys_df[\"weight\"] &gt; 0.][[\"sex\", \"weight\", \"site_id\"]]\n\n# calculate the mean weight for each site id and sex combination:\nstack_selection = stack_selection.groupby([\"site_id\", \"sex\"]).mean().unstack()\n\n# Plot inside jupyter notebook\n%matplotlib inline\n\n# and we can make a stacked bar plot from this:\nstack_selection.plot(kind='bar', stacked=True)\n\n&lt;Axes: xlabel='site_id'&gt;"
  },
  {
    "objectID": "workshop/modules/missing_values.html",
    "href": "workshop/modules/missing_values.html",
    "title": "Handling Missing data",
    "section": "",
    "text": "Estimated teaching time: 20 min\nEstimated challenge time: 0 min"
  },
  {
    "objectID": "workshop/modules/missing_values.html#module-information",
    "href": "workshop/modules/missing_values.html#module-information",
    "title": "Handling Missing data",
    "section": "Module information",
    "text": "Module information\nKey questions:\n\n‚ÄúWhat is missing data?‚Äù\n‚ÄúHow can I analyse my data with missing values using Pandas?‚Äù\n\nLearning objectives:\n\nDescribe what missing values mean.\nHow to access missing values in dataset.\nWhat NaN values are, how they might be represented, and what this means for your work\nHow to replace NaN values, if desired\nHow to use to_csv to write manipulated data to a file."
  },
  {
    "objectID": "workshop/modules/missing_values.html#writing-out-data-to-csv",
    "href": "workshop/modules/missing_values.html#writing-out-data-to-csv",
    "title": "Handling Missing data",
    "section": "Writing Out Data to CSV",
    "text": "Writing Out Data to CSV\nWe‚Äôve learned about using manipulating data to get desired outputs. But we‚Äôve also discussed keeping data that has been manipulated separate from our raw data. Something we might be interested in doing is working with only the columns that have full data. First, let‚Äôs reload the data so we‚Äôre not mixing up all of our previous manipulations.\n\ndf_na = surveys_df.dropna()\n\nIf you now type df_na, you should observe that the resulting DataFrame has 30676 rows and 9 columns, much smaller than the 35549 row original.\nWe can now use the to_csv command to do export a DataFrame in CSV format. Note that the code below will by default save the data into the current working directory. We can save it to a different folder by adding the foldername and a slash before the filename: df1.to_csv('foldername/out.csv'). We use ‚Äòindex=False‚Äô so that pandas doesn‚Äôt include the index number for each line.\n\n# Write DataFrame to CSV\ndf_na.to_csv('output/surveys_complete.csv', index=False)\n\n\nRecap\nWhat we‚Äôve learned:\n\nWhat NaN values are, how they might be represented, and what this means for your work\nHow to replace NaN values, if desired\nHow to use to_csv to write manipulated data to a file."
  },
  {
    "objectID": "workshop/modules/missing_values.html#extra",
    "href": "workshop/modules/missing_values.html#extra",
    "title": "Handling Missing data",
    "section": "Extra",
    "text": "Extra\nWe can run isnull on a particular column too. What does the code below do?\n\n# What does this do?\nempty_weights = surveys_df[pd.isnull(surveys_df['weight'])]['weight']\nprint(empty_weights)\n\n0       NaN\n1       NaN\n2       NaN\n3       NaN\n4       NaN\n         ..\n35530   NaN\n35543   NaN\n35544   NaN\n35545   NaN\n35548   NaN\nName: weight, Length: 3266, dtype: float64\n\n\nLet‚Äôs take a minute to look at the statement above. We are using the Boolean object pd.isnull(surveys_df['weight']) as an index to surveys_df. We are asking Python to select rows that have a NaN value of weight."
  },
  {
    "objectID": "workshop/modules/merging_data.html",
    "href": "workshop/modules/merging_data.html",
    "title": "Combining DataFrames in Pandas",
    "section": "",
    "text": "In many ‚Äúreal world‚Äù situations, the data that we want to use come in multiple files. We often need to combine these files into a single DataFrame to analyze the data. The pandas package provides various methods for combining DataFrames including merge and concat.\nTo work through the examples below, we first need to load the species and surveys files into pandas DataFrames. Before we start, we will make sure that libraries are currectly installed.\nimport pandas as pd\nsurveys_df = pd.read_csv(\"surveys.csv\",\n                         keep_default_na=False, na_values=[\"\"])\nsurveys_df\n\n\n\n\n\n\n\n\nrecord_id\nmonth\nday\nyear\nsite_id\nspecies_id\nsex\nhindfoot_length\nweight\n\n\n\n\n0\n1\n7\n16\n1977\n2\nNL\nM\n32.0\nNaN\n\n\n1\n2\n7\n16\n1977\n3\nNL\nM\n33.0\nNaN\n\n\n2\n3\n7\n16\n1977\n2\nDM\nF\n37.0\nNaN\n\n\n3\n4\n7\n16\n1977\n7\nDM\nM\n36.0\nNaN\n\n\n4\n5\n7\n16\n1977\n3\nDM\nM\n35.0\nNaN\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n35544\n35545\n12\n31\n2002\n15\nAH\nNaN\nNaN\nNaN\n\n\n35545\n35546\n12\n31\n2002\n15\nAH\nNaN\nNaN\nNaN\n\n\n35546\n35547\n12\n31\n2002\n10\nRM\nF\n15.0\n14.0\n\n\n35547\n35548\n12\n31\n2002\n7\nDO\nM\n36.0\n51.0\n\n\n35548\n35549\n12\n31\n2002\n5\nNaN\nNaN\nNaN\nNaN\n\n\n\n\n35549 rows √ó 9 columns"
  },
  {
    "objectID": "workshop/modules/merging_data.html#concatenating-dataframes",
    "href": "workshop/modules/merging_data.html#concatenating-dataframes",
    "title": "Combining DataFrames in Pandas",
    "section": "Concatenating DataFrames",
    "text": "Concatenating DataFrames\nWe can use the concat function in pandas to append either columns or rows from one DataFrame to another. Let‚Äôs grab two subsets of our data to see how this works.\n\n# Read in first 10 lines of surveys table\nsurvey_sub = surveys_df.head(10)\n# Grab the last 10 rows\nsurvey_sub_last10 = surveys_df.tail(10)\n# Reset the index values to the second dataframe appends properly\nsurvey_sub_last10=survey_sub_last10.reset_index(drop=True)\n# drop=True option avoids adding new index column with old index values\n\nWhen we concatenate DataFrames, we need to specify the axis. axis=0 tells pandas to stack the second DataFrame under the first one. It will automatically detect whether the column names are the same and will stack accordingly. axis=1 will stack the columns in the second DataFrame to the RIGHT of the first DataFrame. To stack the data vertically, we need to make sure we have the same columns and associated column format in both datasets. When we stack horizonally, we want to make sure what we are doing makes sense (ie the data are related in some way).\n\n# Stack the DataFrames on top of each other\nvertical_stack = pd.concat([survey_sub, survey_sub_last10], axis=0)\n\n# Place the DataFrames side by side\nhorizontal_stack = pd.concat([survey_sub, survey_sub_last10], axis=1)\n\n\nRow Index Values and Concat\nHave a look at the vertical_stack dataframe? Notice anything unusual? The row indexes for the two data frames survey_sub and survey_sub_last10 have been repeated. We can reindex the new dataframe using the reset_index() method."
  },
  {
    "objectID": "workshop/modules/merging_data.html#writing-out-data-to-csv",
    "href": "workshop/modules/merging_data.html#writing-out-data-to-csv",
    "title": "Combining DataFrames in Pandas",
    "section": "Writing Out Data to CSV",
    "text": "Writing Out Data to CSV\nWe can use the to_csv command to do export a DataFrame in CSV format. Note that the code below will by default save the data into the current working directory. We can save it to a different folder by adding the foldername and a slash to the file vertical_stack.to_csv('foldername/out.csv'). We use the ‚Äòindex=False‚Äô so that pandas doesn‚Äôt include the index number for each line.\n\n# Write DataFrame to CSV\nvertical_stack.to_csv('output/out.csv', index=False)\n\nCheck out your working directory to make sure the CSV wrote out properly, and that you can open it! If you want, try to bring it back into Python to make sure it imports properly.\n\n# For kicks read our output back into Python and make sure all looks good\nnew_output = pd.read_csv('output/out.csv', keep_default_na=False, na_values=[\"\"])"
  },
  {
    "objectID": "workshop/modules/merging_data.html#challenge---combine-data",
    "href": "workshop/modules/merging_data.html#challenge---combine-data",
    "title": "Combining DataFrames in Pandas",
    "section": "Challenge - Combine Data",
    "text": "Challenge - Combine Data\nIn the data folder, there are two survey data files: survey2001.csv and survey2002.csv. Read the data into Python and combine the files to make one new data frame. Create a plot of average plot weight by year grouped by sex. Export your results as a CSV and make sure it reads back into Python properly."
  },
  {
    "objectID": "workshop/modules/merging_data.html#joining-dataframes",
    "href": "workshop/modules/merging_data.html#joining-dataframes",
    "title": "Combining DataFrames in Pandas",
    "section": "Joining DataFrames",
    "text": "Joining DataFrames\nWhen we concatenated our DataFrames we simply added them to each other - stacking them either vertically or side by side. Another way to combine DataFrames is to use columns in each dataset that contain common values (a common unique id). Combining DataFrames using a common field is called ‚Äújoining‚Äù. The columns containing the common values are called ‚Äújoin key(s)‚Äù. Joining DataFrames in this way is often useful when one DataFrame is a ‚Äúlookup table‚Äù containing additional data that we want to include in the other.\nNOTE: This process of joining tables is similar to what we do with tables in an SQL database.\nFor example, the species.csv file that we‚Äôve been working with is a lookup table. This table contains the genus, species and taxa code for 55 species. The species code is unique for each line. These species are identified in our survey data as well using the unique species code. Rather than adding 3 more columns for the genus, species and taxa to each of the 35,549 line Survey data table, we can maintain the shorter table with the species information. When we want to access that information, we can create a query that joins the additional columns of information to the Survey data.\nStoring data in this way has many benefits including:\n\nIt ensures consistency in the spelling of species attributes (genus, species and taxa) given each species is only entered once. Imagine the possibilities for spelling errors when entering the genus and species thousands of times!\nIt also makes it easy for us to make changes to the species information once without having to find each instance of it in the larger survey data.\nIt optimizes the size of our data.\n\n\nJoining Two DataFrames\nTo better understand joins, let‚Äôs grab the first 10 lines of our data as a subset to work with. We‚Äôll use the .head method to do this. We‚Äôll also read in a subset of the species table.\n\n# Read in first 10 lines of surveys table\nsurvey_sub = surveys_df.head(10)\n\n### Download speciesSubset.csv file from web\nimport urllib.request\n\nurl = 'https://bit.ly/2DfqN6C'\n\n\nurllib.request.urlretrieve(url, 'speciesSubset.csv')\n\n# Import a small subset of the species data designed for this part of the lesson.\n# It is stored in the data folder.\nspecies_sub = pd.read_csv('speciesSubset.csv', keep_default_na=False, na_values=[\"\"])\n\nIn this example, species_sub is the lookup table containing genus, species, and taxa names that we want to join with the data in survey_sub to produce a new DataFrame that contains all of the columns from both species_df and survey_df\n\nspecies_sub.columns\n\nIndex(['species_id', 'genus', 'species', 'taxa'], dtype='object')\n\n\n\nsurvey_sub.columns\n\nIndex(['record_id', 'month', 'day', 'year', 'site_id', 'species_id', 'sex',\n       'hindfoot_length', 'weight'],\n      dtype='object')\n\n\nIn our example, the join key is the column containing the two-letter species identifier, which is called species_id.\nNow that we know the fields with the common species ID attributes in each DataFrame, we are almost ready to join our data. However, since there are different types of joins, we also need to decide which type of join makes sense for our analysis.\n\n\nInner Joins\nThe most common type of join is called an inner join. An inner join combines two DataFrames based on a join key and returns a new DataFrame that contains only those rows that have matching values in both of the original DataFrames.\nInner joins yield a DataFrame that contains only rows where the value being joins exists in BOTH tables. An example of an inner join, adapted from this page is below:\n\n\n\ninner join\n\n\nThe pandas function for performing joins is called merge and an Inner join is the default option:\n\nmerged_inner = pd.merge(left=survey_sub,right=species_sub, left_on='species_id', right_on='species_id')\n# In this case `species_id` is the only column name in  both dataframes, so if we skippd `left_on`\n# And `right_on` arguments we would still get the same result\n\n# What's the size of the output data?\nmerged_inner.shape\nmerged_inner\n\n\n\n\n\n\n\n\nrecord_id\nmonth\nday\nyear\nsite_id\nspecies_id\nsex\nhindfoot_length\nweight\ngenus\nspecies\ntaxa\n\n\n\n\n0\n1\n7\n16\n1977\n2\nNL\nM\n32.0\nNaN\nNeotoma\nalbigula\nRodent\n\n\n1\n2\n7\n16\n1977\n3\nNL\nM\n33.0\nNaN\nNeotoma\nalbigula\nRodent\n\n\n2\n3\n7\n16\n1977\n2\nDM\nF\n37.0\nNaN\nDipodomys\nmerriami\nRodent\n\n\n3\n4\n7\n16\n1977\n7\nDM\nM\n36.0\nNaN\nDipodomys\nmerriami\nRodent\n\n\n4\n5\n7\n16\n1977\n3\nDM\nM\n35.0\nNaN\nDipodomys\nmerriami\nRodent\n\n\n5\n8\n7\n16\n1977\n1\nDM\nM\n37.0\nNaN\nDipodomys\nmerriami\nRodent\n\n\n6\n9\n7\n16\n1977\n1\nDM\nF\n34.0\nNaN\nDipodomys\nmerriami\nRodent\n\n\n7\n7\n7\n16\n1977\n2\nPE\nF\nNaN\nNaN\nPeromyscus\neremicus\nRodent\n\n\n\n\n\n\n\nThe result of an inner join of survey_sub and species_sub is a new DataFrame that contains the combined set of columns from survey_sub and species_sub. It only contains rows that have two-letter species codes that are the same in both the survey_sub and species_sub DataFrames. In other words, if a row in survey_sub has a value of species_id that does not appear in the species_id column of species, it will not be included in the DataFrame returned by an inner join. Similarly, if a row in species_sub has a value of species_id that does not appear in the species_id column of survey_sub, that row will not be included in the DataFrame returned by an inner join.\nThe two DataFrames that we want to join are passed to the merge function using the left and right argument. The left_on='species' argument tells merge to use the species_id column as the join key from survey_sub (the left DataFrame). Similarly , the right_on='species_id' argument tells merge to use the species_id column as the join key from species_sub (the right DataFrame). For inner joins, the order of the left and right arguments does not matter.\nThe result merged_inner DataFrame contains all of the columns from survey_sub (record id, month, day, etc.) as well as all the columns from species_sub (species_id, genus, species, and taxa).\nNotice that merged_inner has fewer rows than survey_sub. This is an indication that there were rows in surveys_df with value(s) for species_id that do not exist as value(s) for species_id in species_df.\n\n\nLeft Joins\nWhat if we want to add information from species_sub to survey_sub without losing any of the information from survey_sub? In this case, we use a different type of join called a ‚Äúleft outer join‚Äù, or a ‚Äúleft join‚Äù.\nLike an inner join, a left join uses join keys to combine two DataFrames. Unlike an inner join, a left join will return all of the rows from the left DataFrame, even those rows whose join key(s) do not have values in the right DataFrame. Rows in the left DataFrame that are missing values for the join key(s) in the right DataFrame will simply have null (i.e., NaN or None) values for those columns in the resulting joined DataFrame.\nNote: a left join will still discard rows from the right DataFrame that do not have values for the join key(s) in the left DataFrame.\nMissing Values\nA left join is performed in pandas by calling the same merge function used for inner join, but using the how='left' argument:\n\nmerged_left = pd.merge(left=survey_sub,right=species_sub, how='left', left_on='species_id', right_on='species_id')\n\nmerged_left\n\n\n\n\n\n\n\n\nrecord_id\nmonth\nday\nyear\nsite_id\nspecies_id\nsex\nhindfoot_length\nweight\ngenus\nspecies\ntaxa\n\n\n\n\n0\n1\n7\n16\n1977\n2\nNL\nM\n32.0\nNaN\nNeotoma\nalbigula\nRodent\n\n\n1\n2\n7\n16\n1977\n3\nNL\nM\n33.0\nNaN\nNeotoma\nalbigula\nRodent\n\n\n2\n3\n7\n16\n1977\n2\nDM\nF\n37.0\nNaN\nDipodomys\nmerriami\nRodent\n\n\n3\n4\n7\n16\n1977\n7\nDM\nM\n36.0\nNaN\nDipodomys\nmerriami\nRodent\n\n\n4\n5\n7\n16\n1977\n3\nDM\nM\n35.0\nNaN\nDipodomys\nmerriami\nRodent\n\n\n5\n6\n7\n16\n1977\n1\nPF\nM\n14.0\nNaN\nNaN\nNaN\nNaN\n\n\n6\n7\n7\n16\n1977\n2\nPE\nF\nNaN\nNaN\nPeromyscus\neremicus\nRodent\n\n\n7\n8\n7\n16\n1977\n1\nDM\nM\n37.0\nNaN\nDipodomys\nmerriami\nRodent\n\n\n8\n9\n7\n16\n1977\n1\nDM\nF\n34.0\nNaN\nDipodomys\nmerriami\nRodent\n\n\n9\n10\n7\n16\n1977\n6\nPF\nF\n20.0\nNaN\nNaN\nNaN\nNaN\n\n\n\n\n\n\n\nThe result DataFrame from a left join (merged_left) looks very much like the result DataFrame from an inner join (merged_inner) in terms of the columns it contains. However, unlike merged_inner, merged_left contains the same number of rows as the original survey_sub DataFrame. When we inspect merged_left, we find there are rows where the information that should have come from species_sub (i.e., species_id, genus, and taxa) is missing (they contain NaN values):\n\nmerged_left[ pd.isnull(merged_left.genus) ]\n\n\n\n\n\n\n\n\nrecord_id\nmonth\nday\nyear\nsite_id\nspecies_id\nsex\nhindfoot_length\nweight\ngenus\nspecies\ntaxa\n\n\n\n\n5\n6\n7\n16\n1977\n1\nPF\nM\n14.0\nNaN\nNaN\nNaN\nNaN\n\n\n9\n10\n7\n16\n1977\n6\nPF\nF\n20.0\nNaN\nNaN\nNaN\nNaN\n\n\n\n\n\n\n\nThese rows are the ones where the value of species_id from survey_sub (in this case, PF) does not occur in species_sub.\n\n\nOther join types\nThe pandas merge function supports two other join types:\n\nRight (outer) join: Invoked by passing how='right' as an argument. Similar to a left join, except all rows from the right DataFrame are kept, while rows from the left DataFrame without matching join key(s) values are discarded.\nFull (outer) join: Invoked by passing how='outer' as an argument. This join type returns the all pairwise combinations of rows from both DataFrames; i.e., the result DataFrame will NaN where data is missing in one of the dataframes. This join type is very rarely used."
  },
  {
    "objectID": "workshop/modules/merging_data.html#extra-challenge-1",
    "href": "workshop/modules/merging_data.html#extra-challenge-1",
    "title": "Combining DataFrames in Pandas",
    "section": "Extra Challenge 1",
    "text": "Extra Challenge 1\nCreate a new DataFrame by joining the contents of the surveys.csv and speciesSubset.csv tables. Then calculate and plot the distribution of:\n\ntaxa by plot\ntaxa by sex by plot"
  },
  {
    "objectID": "workshop/modules/loops.html",
    "href": "workshop/modules/loops.html",
    "title": "Automation with Loops",
    "section": "",
    "text": "## Instructor notes\n\n*Estimated teaching time:* 30 min\n\n*Estimated challenge time:* 0 min\n\n*Key questions:*\n\n  - \"How can I do the same operations on many different values?\"\"\n    \n*Learning objectives:*\n\n  - \"Explain what a `for` loop does.\"\n  - \"Correctly write `for` loops to repeat simple calculations.\"\n  - \"Trace changes to a loop variable as the loop runs.\"\n  - \"Trace changes to other variables as they are updated by a `for` loop.\"\n\n*Key points:*\n\n  - \"Use `for variable in sequence` to process the elements of a sequence one at a time.\"\n  - \"The body of a `for` loop must be indented.\"\n  - \"Use `len(thing)` to determine the length of something that contains other values.\"\n\n---\nAn example task that we might want to repeat is printing each character in a word on a line of its own.\nword = 'lead'\nWe can access a character in a string using its index. For example, we can get the first character of the word 'lead', by using word[0]. One way to print each character is to use four print statements:\nprint(word[0])\nprint(word[1])\nprint(word[2])\nprint(word[3])\n\nl\ne\na\nd\nWhile this works, it‚Äôs a bad approach for two reasons:\nRunning:\nGives the error:\nHere‚Äôs a better approach:\nword = 'lead'\nfor char in word:\n    print(char)\n\nl\ne\na\nd\nThis is shorter ‚Äî certainly shorter than something that prints every character in a hundred-letter string ‚Äî and more robust as well:\nword = 'oxygen'\nfor char in word:\n    print(char)\n\no\nx\ny\ng\ne\nn\nThe improved version uses a for loop to repeat an operation ‚Äî in this case, printing ‚Äî once for each thing in a sequence. The general form of a loop is:\nUsing the oxygen example above, the loop might look like this:\nwhere each character (char) in the variable word is looped through and printed one character after another. The numbers in the diagram denote which loop cycle the character was printed in (1 being the first loop, and 6 being the final loop).\nWe can call the loop variable anything we like, but there must be a colon at the end of the line starting the loop, and we must indent anything we want to run inside the loop. Unlike many other languages, there is no command to signify the end of the loop body (e.g.¬†end for); what is indented after the for statement belongs to the loop."
  },
  {
    "objectID": "workshop/modules/loops.html#whats-in-a-name",
    "href": "workshop/modules/loops.html#whats-in-a-name",
    "title": "Automation with Loops",
    "section": "What‚Äôs in a name?",
    "text": "What‚Äôs in a name?\nIn the example above, the loop variable was given the name char as a mnemonic; it is short for ‚Äòcharacter‚Äô. We can choose any name we want for variables. We might just as easily have chosen the name banana for the loop variable, as long as we use the same name when we invoke the variable inside the loop:\n\nword = 'oxygen'\nfor banana in word:\n    print(banana)\n\no\nx\ny\ng\ne\nn\n\n\nIt is a good idea to choose variable names that are meaningful, otherwise it would be more difficult to understand what the loop is doing.\nHere‚Äôs another loop that repeatedly updates a variable:\n\nlength = 0\nfor vowel in 'aeiou':\n    length = length + 1\nprint('There are', length, 'vowels')\n\nThere are 5 vowels\n\n\nIt‚Äôs worth tracing the execution of this little program step by step.\nSince there are five characters in 'aeiou', the statement on line 3 will be executed five times.\nThe first time around, length is zero (the value assigned to it on line 1) and vowel is 'a'. The statement adds 1 to the old value of length, producing 1, and updates length to refer to that new value.\nThe next time around, vowel is 'e' and length is 1, so length is updated to be 2.\nAfter three more updates, length is 5; since there is nothing left in 'aeiou' for Python to process, the loop finishes and the print statement on line 4 tells us our final answer.\nNote that a loop variable vowel is just a variable that‚Äôs being used to record progress in a loop."
  },
  {
    "objectID": "workshop/modules/loops.html#challenge---scope-of-the-loop-variable",
    "href": "workshop/modules/loops.html#challenge---scope-of-the-loop-variable",
    "title": "Automation with Loops",
    "section": "Challenge - scope of the loop variable",
    "text": "Challenge - scope of the loop variable\n\nIn the loop over \"aeiou\" above, does the loop variable vowel exist after the loop has finished ?\n\n\nlength = 0\nfor vowel in 'aeiou':\n    length = length + 1\nprint('After the loop, `vowel` exists and has the value: ' + vowel)\n\n# The loop variable `vowel` exists after the loop is completed, not only inside the loop\n\nAfter the loop, `vowel` exists and has the value: u\n\n\nNote also that finding the length of a string is such a common operation that Python actually has a built-in function to do it called len:\n\nprint(len('aeiou'))\n\n5\n\n\nlen is much faster than any function we could write ourselves, and much easier to read than a two-line loop; it will also give us the length of many other things that we haven‚Äôt met yet, so we should always use it when we can."
  },
  {
    "objectID": "workshop/modules/loops.html#from-1-to-n",
    "href": "workshop/modules/loops.html#from-1-to-n",
    "title": "Automation with Loops",
    "section": "From 1 to N",
    "text": "From 1 to N\nPython has a built-in function called range that creates a sequence of numbers. range can accept 1, 2, or 3 parameters.\n\nIf one parameter is given, range creates an array of that length, starting at zero and incrementing by 1. For example, range(3) produces the numbers 0, 1, 2.\nIf two parameters are given, range starts at the first and ends just before the second, incrementing by one. For example, range(2, 5) produces 2, 3, 4.\nIf range is given 3 parameters, it starts at the first one, ends just before the second one, and increments by the third one. For exmaple range(3, 10, 2) produces 3, 5, 7, 9."
  },
  {
    "objectID": "workshop/modules/loops.html#challenge---loop-over-a-range",
    "href": "workshop/modules/loops.html#challenge---loop-over-a-range",
    "title": "Automation with Loops",
    "section": "Challenge - loop over a range",
    "text": "Challenge - loop over a range\nUsing range, write a loop that uses range to print the first 3 natural numbers:\n1\n2\n3"
  },
  {
    "objectID": "workshop/modules/loops.html#solution",
    "href": "workshop/modules/loops.html#solution",
    "title": "Automation with Loops",
    "section": "Solution",
    "text": "Solution\n\nfor i in range(1, 4):\n   print(i)\n\n1\n2\n3"
  },
  {
    "objectID": "workshop/modules/loops.html#computing-powers-with-loops",
    "href": "workshop/modules/loops.html#computing-powers-with-loops",
    "title": "Automation with Loops",
    "section": "Computing Powers With Loops",
    "text": "Computing Powers With Loops\nExponentiation is built into Python:\n\nprint(5 ** 3)\n\n125"
  },
  {
    "objectID": "workshop/modules/loops.html#challenge---multiplication-in-a-loop",
    "href": "workshop/modules/loops.html#challenge---multiplication-in-a-loop",
    "title": "Automation with Loops",
    "section": "Challenge - multiplication in a loop",
    "text": "Challenge - multiplication in a loop\nWrite a loop that calculates the same result as 5 ** 3 using multiplication (and without exponentiation)."
  },
  {
    "objectID": "workshop/modules/loops.html#solution-1",
    "href": "workshop/modules/loops.html#solution-1",
    "title": "Automation with Loops",
    "section": "Solution",
    "text": "Solution\n\nresult = 1\nfor i in range(0, 3):\n   result = result * 5\nprint(result)\n\n125"
  },
  {
    "objectID": "workshop/modules/loops.html#bonus-challenge-reverse-a-string",
    "href": "workshop/modules/loops.html#bonus-challenge-reverse-a-string",
    "title": "Automation with Loops",
    "section": "Bonus challenge: reverse a string",
    "text": "Bonus challenge: reverse a string\nKnowing that two strings can be concatenated using the + operator, write a loop that takes a string and produces a new string with the characters in reverse order, so 'Newton' becomes 'notweN'."
  },
  {
    "objectID": "workshop/modules/loops.html#solution-2",
    "href": "workshop/modules/loops.html#solution-2",
    "title": "Automation with Loops",
    "section": "Solution",
    "text": "Solution\n\nnewstring = ''\noldstring = 'Newton'\nfor char in oldstring:\n   newstring = char + newstring\nprint(newstring)\n\nnotweN"
  },
  {
    "objectID": "workshop/modules/loops.html#enumerate",
    "href": "workshop/modules/loops.html#enumerate",
    "title": "Automation with Loops",
    "section": "Enumerate",
    "text": "Enumerate\nThe built-in function enumerate takes a sequence (e.g.¬†a list) and generates a new sequence of the same length. Each element of the new sequence is a pair composed of the index (0, 1, 2,‚Ä¶) and the value from the original sequence:\nfor i, x in enumerate(xs):\n    # Do something with i and x\nThe code above loops through xs, assigning the index to i and the value to x."
  },
  {
    "objectID": "workshop/modules/loops.html#bonus-challenge-enumeration-for-computing-the-value-of-a-polynomial",
    "href": "workshop/modules/loops.html#bonus-challenge-enumeration-for-computing-the-value-of-a-polynomial",
    "title": "Automation with Loops",
    "section": "Bonus challenge: enumeration for computing the value of a polynomial",
    "text": "Bonus challenge: enumeration for computing the value of a polynomial\nSuppose you have encoded a polynomial as a list of coefficients in the following way: the first element is the constant term, the second element is the coefficient of the linear term, the third is the coefficient of the quadratic term, etc.\nx = 5\ncc = [2, 4, 3]\ny = cc[0] * x**0 + cc[1] * x**1 + cc[2] * x**2\ny = 97\nWrite a loop using enumerate(cc) which computes the value y of any polynomial, given x and cc."
  },
  {
    "objectID": "workshop/modules/loops.html#solution-3",
    "href": "workshop/modules/loops.html#solution-3",
    "title": "Automation with Loops",
    "section": "Solution",
    "text": "Solution\n\nx = 5\ncc = [2, 4, 3]\ny = cc[0] * x**0 + cc[1] * x**1 + cc[2] * x**2\n\ny = 0\nfor i, c in enumerate(cc):\n    y = y + x**i * c\n    \nprint(y)\n\n97"
  },
  {
    "objectID": "workshop/modules/plotting_with_plotnine.html",
    "href": "workshop/modules/plotting_with_plotnine.html",
    "title": "Making Plots With plotnine (aka ggplot)",
    "section": "",
    "text": "Estimated teaching time: 40 min\nEstimated challenge time: 50 min\nKey questions:\n\n‚Äù How can I visualize data in Python ?‚Äù\n‚Äù What is ‚Äògrammar of graphics‚Äô ?‚Äù\n\nLearning objectives:\n\n‚ÄúFamiliarise yourself with The Grammar of Graphics through plotinine library‚Äù\n‚ÄúCreate a ggplot object.‚Äù\n‚ÄúExplore different geom objects‚Äù\n‚ÄúExplore other layers of ggplot, including themes and labels‚Äù\n\nKey points:\n\n‚Äúplotnine is python implementation of The Gramma of Graphics‚Äù\n‚Äúggplot is a set of gramma rules to make publication quality plots‚Äù\n‚Äúggplot has idea of layer, building a plot is just adding different layers together‚Äù"
  },
  {
    "objectID": "workshop/modules/plotting_with_plotnine.html#instructor-notes",
    "href": "workshop/modules/plotting_with_plotnine.html#instructor-notes",
    "title": "Making Plots With plotnine (aka ggplot)",
    "section": "",
    "text": "Estimated teaching time: 40 min\nEstimated challenge time: 50 min\nKey questions:\n\n‚Äù How can I visualize data in Python ?‚Äù\n‚Äù What is ‚Äògrammar of graphics‚Äô ?‚Äù\n\nLearning objectives:\n\n‚ÄúFamiliarise yourself with The Grammar of Graphics through plotinine library‚Äù\n‚ÄúCreate a ggplot object.‚Äù\n‚ÄúExplore different geom objects‚Äù\n‚ÄúExplore other layers of ggplot, including themes and labels‚Äù\n\nKey points:\n\n‚Äúplotnine is python implementation of The Gramma of Graphics‚Äù\n‚Äúggplot is a set of gramma rules to make publication quality plots‚Äù\n‚Äúggplot has idea of layer, building a plot is just adding different layers together‚Äù"
  },
  {
    "objectID": "workshop/modules/plotting_with_plotnine.html#introduction",
    "href": "workshop/modules/plotting_with_plotnine.html#introduction",
    "title": "Making Plots With plotnine (aka ggplot)",
    "section": "Introduction",
    "text": "Introduction\nPython has a number of powerful plotting libraries to choose from. One of the oldest and most popular is matplotlib - it forms the foundation for many other Python plotting libraries. For this exercise we are going to use plotnine which is a Python implementation of the The Grammar of Graphics, inspired by the interface of the ggplot2 package from R. plotnine (and it‚Äôs R cousin ggplot2) is a very nice way to create publication quality plots.\n\nThe Grammar of Graphics\n\nStatistical graphics is a mapping from data to aesthetic attributes (colour, shape, size) of geometric objects (points, lines, bars)\n\n\nFaceting can be used to generate the same plot for different subsets of the dataset\n\nThese are basic building blocks according to the grammar of graphics:\n\ndata The data + a set of aesthetic mappings that describing variables mapping\ngeom Geometric objects, represent what you actually see on the plot: points, lines, polygons, etc.\nstats Statistical transformations, summarise data in many useful ways.\nscale The scales map values in the data space to values in an aesthetic space\ncoord A coordinate system, describes how data coordinates are mapped to the plane of the graphic.\nfacet A faceting specification describes how to break up the data into subsets for plotting individual set\n\nLet‚Äôs explore these in detail.\nFirst, install the pandas and plotnine packages to ensure they are available.\n\n!pip install pandas plotnine\n\nRequirement already satisfied: pandas in /home/perry/.conda/envs/python-workshop/lib/python3.10/site-packages (1.4.0)\nRequirement already satisfied: plotnine in /home/perry/.conda/envs/python-workshop/lib/python3.10/site-packages (0.10.1)\nRequirement already satisfied: python-dateutil&gt;=2.8.1 in /home/perry/.conda/envs/python-workshop/lib/python3.10/site-packages (from pandas) (2.8.2)\nRequirement already satisfied: pytz&gt;=2020.1 in /home/perry/.conda/envs/python-workshop/lib/python3.10/site-packages (from pandas) (2023.3)\nRequirement already satisfied: numpy&gt;=1.21.0 in /home/perry/.conda/envs/python-workshop/lib/python3.10/site-packages (from pandas) (1.24.2)\nRequirement already satisfied: statsmodels&gt;=0.13.2 in /home/perry/.conda/envs/python-workshop/lib/python3.10/site-packages (from plotnine) (0.13.5)\nRequirement already satisfied: scipy&gt;=1.5.0 in /home/perry/.conda/envs/python-workshop/lib/python3.10/site-packages (from plotnine) (1.10.1)\nRequirement already satisfied: patsy&gt;=0.5.1 in /home/perry/.conda/envs/python-workshop/lib/python3.10/site-packages (from plotnine) (0.5.3)\nRequirement already satisfied: matplotlib&gt;=3.5.0 in /home/perry/.conda/envs/python-workshop/lib/python3.10/site-packages (from plotnine) (3.7.1)\nRequirement already satisfied: mizani&gt;=0.8.1 in /home/perry/.conda/envs/python-workshop/lib/python3.10/site-packages (from plotnine) (0.8.1)\nRequirement already satisfied: pillow&gt;=6.2.0 in /home/perry/.conda/envs/python-workshop/lib/python3.10/site-packages (from matplotlib&gt;=3.5.0-&gt;plotnine) (9.4.0)\nRequirement already satisfied: pyparsing&gt;=2.3.1 in /home/perry/.conda/envs/python-workshop/lib/python3.10/site-packages (from matplotlib&gt;=3.5.0-&gt;plotnine) (3.0.9)\nRequirement already satisfied: contourpy&gt;=1.0.1 in /home/perry/.conda/envs/python-workshop/lib/python3.10/site-packages (from matplotlib&gt;=3.5.0-&gt;plotnine) (1.0.7)\nRequirement already satisfied: cycler&gt;=0.10 in /home/perry/.conda/envs/python-workshop/lib/python3.10/site-packages (from matplotlib&gt;=3.5.0-&gt;plotnine) (0.11.0)\nRequirement already satisfied: packaging&gt;=20.0 in /home/perry/.conda/envs/python-workshop/lib/python3.10/site-packages (from matplotlib&gt;=3.5.0-&gt;plotnine) (23.0)\nRequirement already satisfied: fonttools&gt;=4.22.0 in /home/perry/.conda/envs/python-workshop/lib/python3.10/site-packages (from matplotlib&gt;=3.5.0-&gt;plotnine) (4.39.3)\nRequirement already satisfied: kiwisolver&gt;=1.0.1 in /home/perry/.conda/envs/python-workshop/lib/python3.10/site-packages (from matplotlib&gt;=3.5.0-&gt;plotnine) (1.4.4)\nRequirement already satisfied: palettable in /home/perry/.conda/envs/python-workshop/lib/python3.10/site-packages (from mizani&gt;=0.8.1-&gt;plotnine) (3.3.0)\nRequirement already satisfied: six in /home/perry/.conda/envs/python-workshop/lib/python3.10/site-packages (from patsy&gt;=0.5.1-&gt;plotnine) (1.16.0)\n\n\n\n# We run this to suppress various deprecation warnings from plotnine - keeps our notebook cleaner\nimport warnings\nwarnings.filterwarnings('ignore')"
  },
  {
    "objectID": "workshop/modules/plotting_with_plotnine.html#introduction-to-plotting",
    "href": "workshop/modules/plotting_with_plotnine.html#introduction-to-plotting",
    "title": "Making Plots With plotnine (aka ggplot)",
    "section": "Introduction to plotting",
    "text": "Introduction to plotting\n\nggplot(survs_df, aes(x='weight', y='hindfoot_length')) + geom_point()\n\n\n\n\nLet‚Äôs see if we can also include information about species and year.\n\nggplot(survs_df, aes(x='weight', y='hindfoot_length',\n    size = 'year')) + geom_point()\n\n\n\n\nNotice that we‚Äôve dropped the x= and y= ? These are implied for the first and second argument of aes().\n\nggplot(survs_df, aes(x='weight', y='hindfoot_length', \n    size = 'year', color = 'species_id')) + geom_point()\n\n\n\n\nWe can do simple counting plot, to see how many observation (data points) we have for each year for example\n\nggplot(survs_df, aes(x='year')) + \\\n    geom_bar(stat = 'count')\n\n\n\n\nLet‚Äôs now also color by species to see how many observation we have per species in a given year\n\nggplot(survs_df, aes(x='year', fill = 'species_id')) + \\\n    geom_bar(stat = 'count')"
  },
  {
    "objectID": "workshop/modules/plotting_with_plotnine.html#challenges",
    "href": "workshop/modules/plotting_with_plotnine.html#challenges",
    "title": "Making Plots With plotnine (aka ggplot)",
    "section": "Challenges",
    "text": "Challenges\n\nProduce a plot comparing the number of observations for each species at each site. The plot should have site_id on the x axis, ideally as categorical data. (HINT: You can convert a column in a DataFrame df to the ‚Äòcategory‚Äô type using: df['some_col_name'] = df['some_col_name'].astype('category'))\nCreate a boxplot of hindfoot_length across different species (species_id column) (HINT: There‚Äôs a list of geoms available for plotnine in the docs - instead of geom_bar, which one should you use ?)"
  },
  {
    "objectID": "workshop/modules/plotting_with_plotnine.html#solutions",
    "href": "workshop/modules/plotting_with_plotnine.html#solutions",
    "title": "Making Plots With plotnine (aka ggplot)",
    "section": "Solutions",
    "text": "Solutions\n\n# Part 1\n\n# We convert site_id into a categorical column.\n# This isn't strictly nessecary, but with categories we get all the x-axis labels \n# (with continuous we don't by default) - try both and see\nsurvs_df['site_id'] = survs_df['site_id'].astype('category')\n\nggplot(survs_df, aes(x='site_id', fill = 'species_id')) \\\n    + geom_bar(stat='count')\n\n\n\n\n\n# Part 2\nggplot(survs_df, aes(x='species_id', y='hindfoot_length')) + \\\n    geom_boxplot() + \\\n    theme(axis_text_x = element_text(angle=90, hjust=1))"
  },
  {
    "objectID": "workshop/modules/plotting_with_plotnine.html#more-geom-types",
    "href": "workshop/modules/plotting_with_plotnine.html#more-geom-types",
    "title": "Making Plots With plotnine (aka ggplot)",
    "section": "More geom types",
    "text": "More geom types\n\nggplot(survs_df, aes(x='year', y='weight')) + \\\n    geom_boxplot()\n\n\n\n\nWhy are we not seeing mulitple boxplots, one for each year? This is because year variable is continuous in our data frame, but for this purpose we want it to be categorical.\n\nsurvs_df['year_fact'] = survs_df['year'].astype(\"category\")\n\nggplot(survs_df, aes(x='year_fact', y='weight')) + \\\n    geom_boxplot()\n\n\n\n\nYou‚Äôll notice the x-axis labels are overlapped. To flip them 90-degrees we can apply a theme so they look less cluttered. We will revisit themes later.\n\nggplot(survs_df, aes(x='year_fact', y='weight')) + \\\n    geom_boxplot() + \\\n    theme(axis_text_x = element_text(angle=90, hjust=1))\n\n\n\n\nTo save some typing, let‚Äôs define this x-axis label rotating theme as a short variable name that we can reuse:\n\nflip_xlabels = theme(axis_text_x = element_text(angle=90, hjust=1))\n\n\nggplot(survs_df, aes(x='year_fact', y='weight')) + \\\n    geom_violin() + \\\n    flip_xlabels\n\n\n\n\nTo save an image for later:\n\nplt1 = ggplot(survs_df, aes(x='year_fact', y='weight')) + \\\n           geom_boxplot() + \\\n           xlab(\"Years\") + \\\n           ylab(\"Weight log2(kg)\") + \\\n           ggtitle(\"Boxplots, summary of species weight in each year\")\n\nplt1.save(filename=\"plot1.png\",\n          format='png',\n          dpi=300,\n          height=25,\n          width=25)"
  },
  {
    "objectID": "workshop/modules/plotting_with_plotnine.html#challenges-1",
    "href": "workshop/modules/plotting_with_plotnine.html#challenges-1",
    "title": "Making Plots With plotnine (aka ggplot)",
    "section": "Challenges",
    "text": "Challenges\n\nCan you log2 transform weight and plot a ‚Äúnormalised‚Äù boxplot ? Hint: use np.log2() function and name new column weight_log.\nDoes a log2 transform make this data visualisation better ?"
  },
  {
    "objectID": "workshop/modules/plotting_with_plotnine.html#solution",
    "href": "workshop/modules/plotting_with_plotnine.html#solution",
    "title": "Making Plots With plotnine (aka ggplot)",
    "section": "Solution",
    "text": "Solution\n\nsurvs_df['weight_log'] = np.log2(survs_df['weight'])\n    \nggplot(survs_df, aes(x='year_fact', y='weight_log')) + \\\n    geom_boxplot() + \\\n    xlab(\"Years\") + \\\n    ylab(\"Weight log2(kg)\") + \\\n    ggtitle(\"Boxplots, summary of species wieght in each year\") + \\\n    theme(axis_text_x = element_text(angle=90, hjust=1))"
  },
  {
    "objectID": "workshop/modules/plotting_with_plotnine.html#faceting",
    "href": "workshop/modules/plotting_with_plotnine.html#faceting",
    "title": "Making Plots With plotnine (aka ggplot)",
    "section": "Faceting",
    "text": "Faceting\nggplot has a special technique called faceting that allows to split one plot into multiple plots based on a factor included in the dataset. We will use it to make one plot for a time series for each species.\n\nggplot(survs_df, aes(x='year_fact', y='weight')) + \\\n    geom_boxplot() + \\\n    facet_wrap(['sex']) + \\\n    flip_xlabels + \\\n    theme(axis_text_x = element_text(size=6))\n\n\n\n\n\nggplot(survs_df, aes(x='year_fact', y='weight')) + \\\n    geom_boxplot() + \\\n    theme(axis_text_x = element_text(size=4)) + \\\n    facet_wrap(['species_id']) + \\\n    flip_xlabels\n\n\n\n\nThe two faceted plots above are probably easier to interpret using the weight_log column we created - give it a try !"
  },
  {
    "objectID": "workshop/modules/plotting_with_plotnine.html#the-layered-grammar-of-graphics",
    "href": "workshop/modules/plotting_with_plotnine.html#the-layered-grammar-of-graphics",
    "title": "Making Plots With plotnine (aka ggplot)",
    "section": "The ‚ÄúLayered Grammar of Graphics‚Äù",
    "text": "The ‚ÄúLayered Grammar of Graphics‚Äù\nggplot(data = &lt;DATA&gt;) + \n  &lt;GEOM_FUNCTION&gt;(\n     mapping = aes(&lt;MAPPINGS&gt;),\n     stat = &lt;STAT&gt;, \n     position = &lt;POSITION&gt;\n  ) +\n  &lt;COORDINATE_FUNCTION&gt; +\n  &lt;FACET_FUNCTION&gt;"
  },
  {
    "objectID": "workshop/modules/plotting_with_plotnine.html#theming",
    "href": "workshop/modules/plotting_with_plotnine.html#theming",
    "title": "Making Plots With plotnine (aka ggplot)",
    "section": "Theming",
    "text": "Theming\nplotnine allows pre-defined ‚Äòthemes‚Äô to be applied as aesthetics to the plot.\nA list available theme you may want to experiment with is here: https://plotnine.readthedocs.io/en/stable/api.html#themes\n\nggplot(survs_df, aes(x='year_fact', y='weight')) + \\\n    geom_boxplot() + \\\n    theme_bw() + \\\n    flip_xlabels\n\n\n\n\n\nggplot(survs_df, aes(x='year_fact', y='weight_log')) + \\\n    geom_boxplot() + \\\n    facet_wrap(['species_id']) + \\\n    theme_xkcd() + \\\n    theme(axis_text_x = element_text(size=4, angle=90, hjust=1))\n\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found.\nfindfont: Font family 'xkcd' not found.\nfindfont: Font family 'Humor Sans' not found.\nfindfont: Font family 'Comic Sans MS' not found."
  },
  {
    "objectID": "workshop/modules/plotting_with_plotnine.html#extra-bits-1",
    "href": "workshop/modules/plotting_with_plotnine.html#extra-bits-1",
    "title": "Making Plots With plotnine (aka ggplot)",
    "section": "Extra bits 1",
    "text": "Extra bits 1\nLet‚Äôs try to bin years into decades, which could be crude but might gives simple images to look at.\n\nbins = [(survs_df['year'] &lt; 1980),\n        (survs_df['year'] &lt; 1990),\n        (survs_df['year'] &lt; 2000),\n        (survs_df['year'] &gt;= 2000)]\n\nlabels = ['70s', '80s', '90s', 'Z']\n\nsurvs_df['year_bins'] = np.select(bins, labels)\n\n\nplt2 = ggplot(survs_df, aes(x='year_bins', y='weight_log')) + \\\n           geom_boxplot()\nplt2\n\n\n\n\n\nplt2 = ggplot(survs_df, aes(x='year_bins', y='weight_log')) + \\\n           geom_boxplot() + \\\n           flip_xlabels + \\\n           facet_wrap(['species_id'])\nplt2"
  },
  {
    "objectID": "workshop/modules/plotting_with_plotnine.html#extra-bits-2",
    "href": "workshop/modules/plotting_with_plotnine.html#extra-bits-2",
    "title": "Making Plots With plotnine (aka ggplot)",
    "section": "Extra bits 2",
    "text": "Extra bits 2\nThis is a different way to look at your data\n\nggplot(survs_df, aes(\"year_fact\", \"weight\")) + \\\n    stat_summary(fun_y = np.mean, fun_ymin=np.min, fun_ymax=np.max) + \\\n    theme(axis_text_x = element_text(angle=90, hjust=1))\n    \nggplot(survs_df, aes(\"year_fact\", \"weight\")) + \\\n    stat_summary(fun_y = np.median, fun_ymin=np.min, fun_ymax=np.max) + \\\n    theme(axis_text_x = element_text(angle=90, hjust=1))\n    \nggplot(survs_df, aes(\"year_fact\", \"weight_log\")) + \\\n    stat_summary(fun_y = np.mean, fun_ymin=np.min, fun_ymax=np.max) + \\\n    theme(axis_text_x = element_text(angle=90, hjust=1))"
  },
  {
    "objectID": "workshop/modules/functions.html",
    "href": "workshop/modules/functions.html",
    "title": "Reusable and modular code with functions",
    "section": "",
    "text": "Estimated teaching time: 30 min\nEstimated challenge time: 0 min\nKey questions:\nLearning objectives:\n\n‚ÄúBuild reusable code in Python.‚Äù\n‚ÄúWrite functions using conditional statements (if, then, else)‚Äù"
  },
  {
    "objectID": "workshop/modules/functions.html#instructor-notes",
    "href": "workshop/modules/functions.html#instructor-notes",
    "title": "Reusable and modular code with functions",
    "section": "",
    "text": "Estimated teaching time: 30 min\nEstimated challenge time: 0 min\nKey questions:\nLearning objectives:\n\n‚ÄúBuild reusable code in Python.‚Äù\n‚ÄúWrite functions using conditional statements (if, then, else)‚Äù"
  },
  {
    "objectID": "workshop/modules/functions.html#functions",
    "href": "workshop/modules/functions.html#functions",
    "title": "Reusable and modular code with functions",
    "section": "Functions",
    "text": "Functions\nFunctions wrap up reusable pieces of code - they help you apply the Do Not Repeat Yourself (DRY) principle.\n\ndef square(x):\n    # The body of the function is indicated by indenting by 4 spaces.\n    return x**2\n\nsquare(4)\n\n16\n\n\n\ndef hyphenate(a, b):\n    # return statements immediately return a value (or None if no value is given)\n    return a + '-' + b\n    # Any code in the function after the return statement does not get executed.\n    print(\"We will never get here\")\n\nhyphenate('python', 'esque')\n\n'python-esque'\n\n\nSuppose that separating large data files into individual yearly files is a task that we frequently have to perform. We could write a for loop like the one above every time we needed to do it but that would be time consuming and error prone. A more elegant solution would be to create a reusable tool that performs this task with minimum input from the user. To do this, we are going to turn the code we‚Äôve already written into a function.\nFunctions are reusable, self-contained pieces of code that are called with a single command. They can be designed to accept arguments as input and return values, but they don‚Äôt need to do either. Variables declared inside functions only exist while the function is running and if a variable within the function (a local variable) has the same name as a variable somewhere else in the code, the local variable hides but doesn‚Äôt overwrite the other.\nEvery method used in Python (for example, print) is a function, and the libraries we import (say, pandas) are a collection of functions. We will only use functions that are housed within the same code that uses them, but it‚Äôs also easy to write functions that can be used by different programs.\nFunctions are declared following this general structure:\ndef this_is_the_function_name(input_argument1, input_argument2):\n\n    # The body of the function is indented\n    # This function prints the two arguments to screen\n    print('The function arguments are:', input_argument1, input_argument2, '(this is done inside the function!)')\n\n    # And returns their product\n    return input_argument1 * input_argument2\nThe function declaration starts with the word def, followed by the function name and any arguments in parenthesis, and ends in a colon. The body of the function is indented just like loops are. If the function returns something when it is called, it includes a return statement at the end.\nLet‚Äôs rewrite this function with shorter (but still informative) names so we don‚Äôt need to type as much:\n\ndef product(a, b):\n    print('The function arguments are:', a, b, '(this is done inside the function!)')\n\n    return a * b\n\nThis is how we call the function:\n\nproduct_of_inputs = product(2, 5)\n\nThe function arguments are: 2 5 (this is done inside the function!)\n\n\n\nprint('Their product is:', product_of_inputs, '(this is done outside the function!)')\n\nTheir product is: 10 (this is done outside the function!)"
  },
  {
    "objectID": "workshop/modules/functions.html#challenge---functions",
    "href": "workshop/modules/functions.html#challenge---functions",
    "title": "Reusable and modular code with functions",
    "section": "Challenge - Functions",
    "text": "Challenge - Functions\n\nChange the values of the input arguments in the function and check its output.\nTry calling the function by giving it the wrong number of arguments (not 2) or not assigning the function call to a variable (no product_of_inputs =).\n\n\nBonus challenges\n\nDeclare a variable inside the function and test to see where it exists (Hint: can you print it from outside the function?).\nExplore what happens when a variable both inside and outside the function have the same name. What happens to the global variable when you change the value of the local variable?"
  },
  {
    "objectID": "workshop/modules/functions.html#solutions---functions",
    "href": "workshop/modules/functions.html#solutions---functions",
    "title": "Reusable and modular code with functions",
    "section": "Solutions - Functions",
    "text": "Solutions - Functions\n\n# Challenge part 1\nproduct_of_inputs = product(2, 6)\nprint(product_of_inputs)\n\nThe function arguments are: 2 6 (this is done inside the function!)\n12\n\n\nChallenge part 2:\nproduct(2, 6, \"nope\")\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n&lt;ipython-input-12-fe9d9cd35fe2&gt; in &lt;module&gt;()\n      1 # 2\n----&gt; 2 this_is_the_function_name(2, 6, \"nope\")\n\nTypeError: this_is_the_function_name() takes 2 positional arguments but 3 were given\nChallenge part 3:\ndef product(a, b):\n    \n    inside_fun = \"existential crisis\"\n    print('The function arguments are:', a, b, '(this is done inside the function!)')\n    \n    return a * b\n\nproduct(2, 5)\nprint(inside_fun)\nThe function arguments are: 2 5 (this is done inside the function!)\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\n&lt;ipython-input-13-e7a0563b00a6&gt; in &lt;module&gt;()\n     12 \n     13 this_is_the_function_name(2, 5)\n---&gt; 14 print(inside_fun)\n\nNameError: name 'inside_fun' is not defined\n\n# Challenge part 4\noutside = \"unchanged\"\ndef product(a, b):\n    \n    outside = \"I'm being manipulated\"\n    print('The function arguments are:', a, b, '(this is done inside the function!)')\n\n    return a * b\n\nproduct(2, 5)\nprint(outside)\n\nThe function arguments are: 2 5 (this is done inside the function!)\nunchanged\n\n\nSay we had some code for taking our survey.csv data and splitting it out into one file for each year:\n# First let's make sure we've read the survey data into a pandas DataFrame.\nimport pandas as pd\nall_data = pd.read_csv(\"surveys.csv\")\n\nthis_year = 2002\n# Select data for just that year\nsurveys_year = all_data[all_data.year == this_year]\n\n# Write the new DataFrame to a csv file\nfilename = 'surveys' + str(this_year) + '.csv'\nsurveys_year.to_csv(filename)\nThere are many different ‚Äúchunks‚Äù of this code that we can turn into functions, and we can even create functions that call other functions inside them. Let‚Äôs first write a function that separates data for just one year and saves that data to a file:\n\ndef year_to_csv(year, all_data):\n    \"\"\"\n    Writes a csv file for data from a given year.\n\n    year --- year for which data is extracted\n    all_data --- DataFrame with multi-year data\n    \"\"\"\n\n    # Select data for the year\n    surveys_year = all_data[all_data.year == year]\n\n    # Write the new DataFrame to a csv file\n    filename = 'function_surveys' + str(year) + '.csv'\n    surveys_year.to_csv(f\"./data/{filename}\")\n\nThe text between the two sets of triple double quotes is called a docstring and contains the documentation for the function. It does nothing when the function is running and is therefore not necessary, but it is good practice to include docstrings as a reminder of what the code does. Docstrings in functions also become part of their ‚Äòofficial‚Äô documentation:\n\n?year_to_csv\n\nSignature: year_to_csv(year, all_data)\nDocstring:\nWrites a csv file for data from a given year.\n\nyear --- year for which data is extracted\nall_data --- DataFrame with multi-year data\nFile: ~/devel/python-workshop-base/workshops/docs/modules/&lt;ipython-input-16-978149c5937c&gt;\nType: function\n\n# Read the survey data into a pandas DataFrame.\n# (if you are jumping in to just this lesson and don't yet have the surveys.csv file yet, \n#  see the \"Data analysis in Python with Pandas\" `working_with_data` module)\nimport pandas as pd\nsurveys_df = pd.read_csv(\"surveys.csv\")\n\nyear_to_csv(2002, surveys_df)\n\n\nAside - listing files and the os module\nGoogle Collaboratory and Juypter Notebooks have a built-in file browser, however, you can list the files and directories in the current directory (‚Äúfolder‚Äù) with Python code like:\nimport os\n\nprint(os.listdir())\nYou‚Äôll see a Python list, a bit like:\n['surveys.csv','function_surveys2002.csv']\n(you may have additional files listed here, generated in previous lessons)\nThe os module contains, among other things, a bunch of useful functions for working with the filesystem and file paths.\nTwo other useful examples (hint - these might help in a upcoming challenge):\n# This returns True if the file or directory specified exists\nos.path.exists('surveys.csv')\n# This creates empty (nested) directories based on a path (eg in a 'path' each directory is separated by slashes)\nos.makedirs('data/csvs/')\nIf a directory already exists, os.makedirs fails and produces an error message (in Python terminology we might say it ‚Äòraises an exception‚Äô ).\nWe can avoid this by using os.path.exists and os.makedirs together like:\nif not os.path.exists('data/csvs/'):\n    os.makedirs('data/csvs/')\nWhat we really want to do, though, is create files for multiple years without having to request them one by one. Let‚Äôs write another function that uses a for loop over a sequence of years and repeatedly calls the function we just wrote, year_to_csv:\n\ndef create_csvs_by_year(start_year, end_year, all_data):\n    \"\"\"\n    Writes separate CSV files for each year of data.\n\n    start_year --- the first year of data we want\n    end_year --- the last year of data we want\n    all_data --- DataFrame with multi-year data\n    \"\"\"\n\n    # \"end_year\" is the last year of data we want to pull, so we loop to end_year+1\n    for year in range(start_year, end_year+1):\n        year_to_csv(year, all_data)\n\nBecause people will naturally expect that the end year for the files is the last year with data, the for loop inside the function ends at end_year + 1. By writing the entire loop into a function, we‚Äôve made a reusable tool for whenever we need to break a large data file into yearly files. Because we can specify the first and last year for which we want files, we can even use this function to create files for a subset of the years available. This is how we call this function:\n\n# Create CSV files, one for each year in the given range\ncreate_csvs_by_year(1977, 2002, surveys_df)"
  },
  {
    "objectID": "workshop/modules/functions.html#challenge---more-functions",
    "href": "workshop/modules/functions.html#challenge---more-functions",
    "title": "Reusable and modular code with functions",
    "section": "Challenge - More Functions",
    "text": "Challenge - More Functions\n\nHow could you use the function create_csvs_by_year to create a CSV file for only one year ? (Hint: think about the syntax for range)\nModify year_to_csv so that it has two additional arguments, output_path (the path of the directory where the files will be written) and filename_prefix (a prefix to be added to the start of the file name). Name your new function year_to_csv_at_path. Eg, def year_to_csv_at_path(year, all_data, output_path, filename_prefix):. Call your new function to create a new file with a different name in a different directory. ‚Ä¶ Hint: You could manually create the target directory before calling the function using the Collaboratory / Jupyter file browser, or for bonus points you could do it in Python inside the function using the os module.\nCreate a new version of the create_csvs_by_year function called create_csvs_by_year_at_path that also takes the additional arguments output_path and filename_prefix. Internally create_csvs_by_year_at_path should pass these values to year_to_csv_at_path. Call your new function to create a new set of files with a different name in a different directory.\nMake these new functions return a list of the files they have written. There are many ways you can do this (and you should try them all!): you could make the function print the filenames to screen, or you could use a return statement to make the function produce a list of filenames, or you can use some combination of the two. You could also try using the os library to list the contents of directories."
  },
  {
    "objectID": "workshop/modules/functions.html#solutions---more-functions",
    "href": "workshop/modules/functions.html#solutions---more-functions",
    "title": "Reusable and modular code with functions",
    "section": "Solutions - More Functions",
    "text": "Solutions - More Functions\n\n# Solution - part 1\ncreate_csvs_by_year(2002, 2002, surveys_df)\n\n\n# Solution - part 2 and 3\nimport os\n\ndef year_to_csv_at_path(year, all_data, output_path, filename_prefix):\n    \"\"\"\n    Writes a csv file for data from a given year.\n\n    year --- year for which data is extracted\n    all_data --- DataFrame with multi-year data\n    output_path --- The output path for the generated file\n    filename_prefix --- Output filename will be of the form \"{filename_prefix}{year}.csv\"\n    \"\"\"\n\n    # Select data for the year\n    surveys_year = all_data[all_data.year == year]\n\n    # Create directories if required\n    if not os.path.exists(output_path):\n        os.makedirs(output_path)\n    \n    # Write the new DataFrame to a csv file\n    filename = output_path + '/' + filename_prefix + str(year) + '.csv'\n    surveys_year.to_csv(filename)\n\ndef create_csvs_by_year_at_path(start_year, end_year, all_data, output_path, filename_prefix):\n    \"\"\"\n    Writes separate CSV files for each year of data.\n\n    start_year --- the first year of data we want\n    end_year --- the last year of data we want\n    all_data --- DataFrame with multi-year data\n    output_path --- The output path for the generated file\n    filename_prefix --- Output filename will be of the form \"{filename_prefix}{year}.csv\"\n    \"\"\"\n\n    # \"end_year\" is the last year of data we want to pull, so we loop to end_year+1\n    for year in range(start_year, end_year+1):\n        year_to_csv_at_path(year, all_data, output_path, filename_prefix)\n\n\n# Solution - part 4\n\ndef year_to_csv_return_filenames(year, all_data):\n    # Select data for the year\n    surveys_year = all_data[all_data.year == year]\n\n    # Write the new DataFrame to a csv fileoutput_path\n    filename = 'function_surveys' + str(year) + '.csv'\n    surveys_year.to_csv(filename)\n    \n    # We could just print the filename. We can see the result, but won't capture the value\n    # print(filename)\n    \n    # It's often more useful to return data rather than print it, so we can do something with it\n    return filename\n\ndef create_csvs_by_year_return_filenames(start_year, end_year, all_data):\n    \n    generated_files = []\n    for year in range(start_year, end_year+1):\n        fn = year_to_csv_return_filenames(year, all_data)\n        generated_files.append(fn)\n        \n    return generated_files\n\nprint(create_csvs_by_year_return_filenames(2000, 2002, surveys_df))\n\n['function_surveys2000.csv', 'function_surveys2001.csv', 'function_surveys2002.csv']\n\n\nThe functions we wrote demand that we give them a value for every argument. Ideally, we would like these functions to be as flexible and independent as possible. Let‚Äôs modify the function create_csvs_by_year so that the start_year and end_year default to the full range of the data if they are not supplied by the user.\nArguments can be given default values with an equal sign in the function declaration - we call these ‚Äòkeyword‚Äô arguments. Any argument in the function without a default value (here, all_data) is a required argument - we call these ‚Äòpositional‚Äô arguments. Positional arguements MUST come before any keyword arguments. Keyword arguments are optional - if you don‚Äôt include them when calling the function, the default value is used.\n\ndef keyword_arg_test(all_data, start_year = 1977, end_year = 2002):\n    \"\"\"\n    A simple function to demonstrate the use of keyword arguments with defaults !\n\n    start_year --- the first year of data we want --- default: 1977\n    end_year --- the last year of data we want --- default: 2002\n    all_data --- DataFrame with multi-year data - not actually used\n    \"\"\"\n\n    return start_year, end_year\n\n\nstart,end = keyword_arg_test(surveys_df, 1988, 1993)\nprint('Both optional arguments:\\t', start, end)\n\nstart,end = keyword_arg_test(surveys_df)\nprint('Default values:\\t\\t\\t', start, end)\n\nBoth optional arguments:     1988 1993\nDefault values:          1977 2002\n\n\nThe \\t in the print statements are tabs, used to make the text align and be easier to read.\nWhat if our dataset doesn‚Äôt start in 1977 and end in 2002? We can modify the function so that it looks for the ealiest and latest years in the dataset if those dates are not provided. Let‚Äôs redefine csvs_by_year:\n\ndef csvs_by_year(all_data, start_year = None, end_year = None):\n    \"\"\"\n    Writes separate CSV files for each year of data. The start year and end year can \n    be optionally provided, otherwise the earliest and latest year in the dataset are\n    used as the range.\n\n    start_year --- the first year of data we want --- default: None - check all_data\n    end_year --- the last year of data we want --- default: None - check all_data\n    all_data --- DataFrame with multi-year data\n    \"\"\"\n\n    if start_year is None:\n        start_year = min(all_data.year)\n    if end_year is None:\n        end_year = max(all_data.year)\n\n    return start_year, end_year\n\n\nstart,end = csvs_by_year(surveys_df, 1988, 1993)\nprint('Both optional arguments:\\t', start, end)\n\nstart,end = csvs_by_year(surveys_df)\nprint('Default values:\\t\\t\\t', start, end)\n\nBoth optional arguments:     1988 1993\nDefault values:          1977 2002\n\n\nThe default values of the start_year and end_year arguments in this new version of the csvs_by_year function are now None. This is a built-in constant in Python that indicates the absence of a value - essentially, that the variable exists in the namespace of the function (the directory of variable names) but that it doesn‚Äôt correspond to any existing object."
  },
  {
    "objectID": "workshop/modules/functions.html#challenge---experimenting-with-keyword-arguments",
    "href": "workshop/modules/functions.html#challenge---experimenting-with-keyword-arguments",
    "title": "Reusable and modular code with functions",
    "section": "Challenge - Experimenting with keyword arguments",
    "text": "Challenge - Experimenting with keyword arguments\n\nWhat type of object corresponds to a variable declared as None ? (Hint: create a variable set to None and use the function type())\nCompare the behavior of the function csvs_by_year when the keyword arguments have None as a default vs.¬†calling the function by supplying (non-default) values to the keyword arguments\nWhat happens if you only include a value for start_year in the function call? Can you write the function call with only a value for end_year ? (Hint: think about how the function must be assigning values to each of the arguments - this is related to the need to put the arguments without default values before those with default values in the function definition!)"
  },
  {
    "objectID": "workshop/modules/functions.html#solutions---experimenting-with-keyword-arguments",
    "href": "workshop/modules/functions.html#solutions---experimenting-with-keyword-arguments",
    "title": "Reusable and modular code with functions",
    "section": "Solutions - Experimenting with keyword arguments",
    "text": "Solutions - Experimenting with keyword arguments\n\n# Challenge 1\nthe_void = None\ntype(the_void)\n\nNoneType\n\n\n\n# Challenge 2\nprint(csvs_by_year(surveys_df))\nprint(csvs_by_year(surveys_df, start_year=1999, end_year=2001))\n\n(1977, 2002)\n(1999, 2001)\n\n\n\n# Challenge 3\nprint(csvs_by_year(surveys_df, start_year=1999))\n\n# Keyword args are taken in order if there is no keyword used\n# Doing this is a bit dangerous (what if you later decide to add more keyword args to the function ?)\nprint(csvs_by_year(surveys_df, 1999))\nprint(csvs_by_year(surveys_df, 1999, end_year=2001))\n\n# But keyword args must always come last - this throws an error\n# print(csvs_by_year(surveys_df, start_year=1999, 2001))\n\n# We don't need to specify all keyword args, nor do they need to be in order\nprint(csvs_by_year(surveys_df, end_year=1999))\nprint(csvs_by_year(surveys_df, end_year=2001, start_year=1999))\n\n(1999, 2002)\n(1999, 2002)\n(1999, 2001)\n(1977, 1999)\n(1999, 2001)"
  },
  {
    "objectID": "workshop/modules/functions.html#conditionals---if-statements",
    "href": "workshop/modules/functions.html#conditionals---if-statements",
    "title": "Reusable and modular code with functions",
    "section": "Conditionals - if statements",
    "text": "Conditionals - if statements\nThe body of the test function now has two conditionals (if statements) that check the values of start_year and end_year. if statements execute a segment of code when some condition is met. They commonly look something like this:\n\na = 5\n\nif a &lt; 0:  # Meets first condition?\n\n    # if a IS less than zero\n    print('a is a negative number')\n\nelif a &gt; 0:  # Did not meet first condition. meets second condition?\n\n    # if a ISN'T less than zero and IS more than zero\n    print('a is a positive number')\n\nelse:  # Met neither condition\n\n    # if a ISN'T less than zero and ISN'T more than zero\n    print('a must be zero!')\n\na is a positive number\n\n\nChange the value of a to see how this function works. The statement elif means ‚Äúelse if‚Äù, and all of the conditional statements must end in a colon.\nThe if statements in the function csvs_by_year check whether there is an object associated with the variable names start_year and end_year. If those variables are None, the if statements return the boolean True and execute whatever is in their body. On the other hand, if the variable names are associated with some value (they got a number in the function call), the if statements return False and do not execute. The opposite conditional statements, which would return True if the variables were associated with objects (if they had received value in the function call), would be if start_year and if end_year.\nAs we‚Äôve written it so far, the function csvs_by_year associates values in the function call with arguments in the function definition just based in their order. If the function gets only two values in the function call, the first one will be associated with all_data and the second with start_year, regardless of what we intended them to be. We can get around this problem by calling the function using keyword arguments, where each of the arguments in the function definition is associated with a keyword and the function call passes values to the function using these keywords:\n\nstart,end = csvs_by_year(surveys_df)\nprint('Default values:\\t\\t\\t', start, end)\n\nstart,end = csvs_by_year(surveys_df, 1988, 1993)\nprint('No keywords:\\t\\t\\t', start, end)\n\nstart,end = csvs_by_year(surveys_df, start_year = 1988, end_year = 1993)\nprint('Both keywords, in order:\\t', start, end)\n\nstart,end = csvs_by_year(surveys_df, end_year = 1993, start_year = 1988)\nprint('Both keywords, flipped:\\t\\t', start, end)\n\nstart,end = csvs_by_year(surveys_df, start_year = 1988)\nprint('One keyword, default end:\\t', start, end)\n\nstart,end = csvs_by_year(surveys_df, end_year = 1993)\nprint('One keyword, default start:\\t', start, end)\n\nDefault values:          1977 2002\nNo keywords:             1988 1993\nBoth keywords, in order:     1988 1993\nBoth keywords, flipped:      1988 1993\nOne keyword, default end:    1988 2002\nOne keyword, default start:  1977 1993"
  },
  {
    "objectID": "workshop/modules/functions.html#multiple-choice-challenge",
    "href": "workshop/modules/functions.html#multiple-choice-challenge",
    "title": "Reusable and modular code with functions",
    "section": "Multiple choice challenge",
    "text": "Multiple choice challenge\nWhat output would you expect from the if statement (try to figure out the answer without running the code):\npod_bay_doors_open = False\ndave_want_doors_open = False\nhal_insanity_level = 2001\n\nif not pod_bay_doors_open:\n    print(\"Dave: Open the pod bay doors please HAL.\")\n    dave_wants_doors_open = True\nelif pod_bay_doors_open and hal_insanity_level &gt;= 95:\n    print(\"HAL: I'm closing the pod bay doors, Dave.\")\n    \nif dave_wants_doors_open and not pod_bay_doors_open and hal_insanity_level &gt;= 95:\n    print(\"HAL: I‚Äôm sorry, Dave. I‚Äôm afraid I can‚Äôt do that.\")\nelif dave_wants_doors_open and not pod_bay_doors_open:\n    print(\"HAL: I'm opening the pod bay doors, welcome back Dave.\")\nelse:\n    print(\"... silence of space ...\")\na) ‚ÄúHAL: I‚Äôm closing the pod bay doors, Dave.‚Äù, ‚Äú‚Ä¶ silence of space ‚Ä¶‚Äù\nb) ‚ÄúDave: Open the pod bay doors please HAL.‚Äù, ‚ÄúHAL: I‚Äôm sorry, Dave. I‚Äôm afraid I can‚Äôt do that.‚Äù\nc) ‚Äú‚Ä¶ silence of space ‚Ä¶‚Äù\nd) ‚ÄúDave: Open the pod bay doors please HAL.‚Äù, HAL: ‚ÄúI‚Äôm opening the pod bay doors, welcome back Dave.‚Äù\nOption (b)"
  },
  {
    "objectID": "workshop/modules/functions.html#bonus-challenge---modifying-functions",
    "href": "workshop/modules/functions.html#bonus-challenge---modifying-functions",
    "title": "Reusable and modular code with functions",
    "section": "Bonus Challenge - Modifying functions",
    "text": "Bonus Challenge - Modifying functions\n\nRewrite the year_to_csv and csvs_by_year functions to have keyword arguments with default values.\nModify the functions so that they don‚Äôt create yearly files if there is no data for a given year and display an alert to the user (Hint: use conditional statements to do this. For an extra challenge, use try statements !).\nThe code below checks to see whether a directory exists and creates one if it doesn‚Äôt. Add some code to your function that writes out the CSV files, to check for a directory to write to.\n\nimport os\n\nif 'dir_name_here' in os.listdir():\n   print('Processed directory exists')\nelse:\n   os.mkdir('dir_name_here')\n   print('Processed directory created')\n4. The code that you have written so far to loop through the years is good, however it is not necessarily reproducible with different datasets. For instance, what happens to the code if we have additional years of data in our CSV files? Using the tools that you learned in the previous activities, make a list of all years represented in the data. Then create a loop to process your data, that begins at the earliest year and ends at the latest year using that list.\nHINT: you can create a loop with a list as follows: for years in year_list:"
  },
  {
    "objectID": "workshop/modules/functions.html#solutions---modifying-functions",
    "href": "workshop/modules/functions.html#solutions---modifying-functions",
    "title": "Reusable and modular code with functions",
    "section": "Solutions - Modifying functions",
    "text": "Solutions - Modifying functions\n\n# Solution - part 1\n\ndef year_to_csv(year=None, all_data=None):\n    \"\"\"\n    Writes a csv file for data from a given year.\n\n    year --- year for which data is extracted\n    all_data --- DataFrame with multi-year data\n    \"\"\"\n\n    if all_data is None:\n        all_data = pd.read_csv(\"surveys.csv\")\n    \n    if year is None:\n        year = min(all_data.year)\n    \n    # Select data for the year\n    surveys_year = all_data[all_data.year == year]\n\n    # Write the new DataFrame to a csv file\n    filename = 'function_surveys' + str(year) + '.csv'\n    surveys_year.to_csv(filename)\n    \n    \ndef csvs_by_year(start_year=None, end_year=None, all_data=None):\n    \"\"\"\n    Writes separate CSV files for each year of data.\n\n    start_year --- the first year of data we want\n    end_year --- the last year of data we want\n    all_data --- DataFrame with multi-year data\n    \"\"\"\n    \n    if all_data is None:\n        all_data = pd.read_csv(\"surveys.csv\")\n    \n    if start_year is None:\n        start_year = min(all_data.year)\n        \n    if end_year is None:\n        end_year = max(all_data.year)\n\n    # \"end_year\" is the last year of data we want to pull, so we loop to end_year+1\n    for year in range(start_year, end_year+1):\n        year_to_csv(year, all_data)\n\n\n# Solution - part 2\n\ndef csvs_by_year(start_year=None, end_year=None, all_data=None):\n    \"\"\"\n    Writes separate CSV files for each year of data.\n\n    start_year --- the first year of data we want\n    end_year --- the last year of data we want\n    all_data --- DataFrame with multi-year data\n    \"\"\"\n    \n    if all_data is None:\n        all_data = pd.read_csv(\"surveys.csv\")\n    \n    if start_year is None:\n        start_year = min(all_data.year)\n        \n    if end_year is None:\n        end_year = max(all_data.year)\n\n    # \"end_year\" is the last year of data we want to pull, so we loop to end_year+1\n    for year in range(start_year, end_year+1):\n        # print(len(all_data[all_data.year == year]))\n        if len(all_data[all_data.year == year]) &gt; 0:\n            year_to_csv(year, all_data)\n        else:\n            print(\"Skipping: \", year, \" - no data points for this year.\")\n\nsurveys_df = pd.read_csv(\"surveys.csv\")\ncsvs_by_year(1977, 2002, surveys_df)\n\n\nimport os\n\n# Solution - part 3\ndef year_to_csv(year=None, all_data=None, output_dir='output'):\n    \"\"\"\n    Writes a csv file for data from a given year.\n\n    year --- year for which data is extracted\n    all_data --- DataFrame with multi-year data\n    output_dir --- the output directory when CSV files will be written\n    \"\"\"\n\n    if all_data is None:\n        all_data = pd.read_csv(\"surveys.csv\")\n    \n    if year is None:\n        year = min(all_data.year)\n    \n    # Select data for the year\n    surveys_year = all_data[all_data.year == year]\n\n\n    if output_dir in os.listdir('.'):\n        print('Processed directory exists: ', output_dir)\n    else:\n        os.mkdir(output_dir)\n        print('Processed directory created: ', output_dir)\n    \n    # Write the new DataFrame to a csv file\n    filename = output_dir + '/' + 'function_surveys' + str(year) + '.csv'\n    # The more correct way to create paths is:\n    # filename = os.path.join(output_dir, 'function_surveys' + str(year) + '.csv')\n    surveys_year.to_csv(filename)\n    \nyear_to_csv(2002, surveys_df)\n\nProcessed directory exists:  output\n\n\n\n# Solution - part 4\ndef csvs_by_year(all_data):\n    \"\"\"\n    Writes separate CSV files for each year of data.\n\n    all_data --- DataFrame with multi-year data\n    \"\"\"\n\n    # We could do this, but missing years will be included in the 'range'\n    # start_year = min(all_data.year)\n    # end_year = max(all_data.year)\n    # year_list = range(start_year, end_year+1)\n    \n    # Instead, we create an empty list, then loop over all the rows, adding years\n    # we haven't seen yet to the list.\n    year_list = []\n    for year in surveys_df.year:\n        if year not in year_list:\n            year_list.append(year)\n    \n    # An elegant alternative is to use a 'set' object.\n    # A 'set' is a collection where every value is unique - no duplicates.\n    # This ensures no repeated years and has the advantage of also skipping missing years.\n    # year_list = set(surveys_df.year)\n    \n    # \"end_year\" is the last year of data we want to pull, so we loop to end_year+1\n    for year in year_list:\n        year_to_csv(year, all_data)\n        \n# The 'list' of years from each row contains duplicates (we just list the first 20 here)\nprint(list(surveys_df.year)[0:20])\n\nprint()\n\n# Making it a 'set' removes duplicates\nprint(list(set(surveys_df.year)))\n\n[1977, 1977, 1977, 1977, 1977, 1977, 1977, 1977, 1977, 1977, 1977, 1977, 1977, 1977, 1977, 1977, 1977, 1977, 1977, 1977]\n\n[1977, 1978, 1979, 1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002]"
  },
  {
    "objectID": "workshop/modules/defensive_programming.html",
    "href": "workshop/modules/defensive_programming.html",
    "title": "Defensive Programming",
    "section": "",
    "text": "Estimated teaching time: 30 min\nEstimated challenge time: 0 min"
  },
  {
    "objectID": "workshop/modules/defensive_programming.html#module-information",
    "href": "workshop/modules/defensive_programming.html#module-information",
    "title": "Defensive Programming",
    "section": "Module information",
    "text": "Module information\nKey questions:\n\n‚ÄúHow can I make my programs more reliable?‚Äù\n\nLearning objectives:\n\nExplain what an assertion is.\nAdd assertions that check the program‚Äôs state is correct.\nCorrectly add precondition and postcondition assertions to functions.\nExplain what test-driven development is, and use it when creating new functions.\nExplain why variables should be initialized using actual data values rather than arbitrary constants."
  },
  {
    "objectID": "workshop/modules/defensive_programming.html#defensive-programming",
    "href": "workshop/modules/defensive_programming.html#defensive-programming",
    "title": "Defensive Programming",
    "section": "Defensive Programming",
    "text": "Defensive Programming\nOur previous lessons have introduced the basic tools of programming: variables and lists, file operations, data visualisation, loops, conditionals, and functions. What they haven‚Äôt done is show us how to tell whether a program is getting the right answer, and how to tell if it‚Äôs still getting the right answer as we make changes to it.\nTo achieve that, we need to:\n\nWrite programs that check their own operation.\nWrite and run tests for widely-used functions.\nMake sure we know what ‚Äúcorrect‚Äù actually means.\n\nThe good news is, doing these things will speed up our programming, not slow it down. As in real carpentry ‚Äî the kind done with lumber ‚Äî the time saved by measuring carefully before cutting a piece of wood is much greater than the time that measuring takes."
  },
  {
    "objectID": "workshop/modules/defensive_programming.html#assertions",
    "href": "workshop/modules/defensive_programming.html#assertions",
    "title": "Defensive Programming",
    "section": "Assertions",
    "text": "Assertions\nThe first step toward getting the right answers from our programs is to assume that mistakes will happen and to guard against them. This is called defensive programming, and the most common way to do it is to add assertions to our code so that it checks itself as it runs. An assertion is simply a statement that something must be true at a certain point in a program. When Python sees one, it evaluates the assertion‚Äôs condition. If it‚Äôs true, Python does nothing, but if it‚Äôs false, Python halts the program immediately and prints the error message if one is provided. For example, this piece of code halts as soon as the loop encounters a value that isn‚Äôt positive:\nnumbers = [1.5, 2.3, 0.7, -0.001, 4.4]\ntotal = 0.0\nfor n in numbers:\n    assert n &gt; 0.0, 'Data should only contain positive values'\n    total += n\nprint('total is:', total)\n---------------------------------------------------------------------------\nAssertionError                            Traceback (most recent call last)\n&lt;ipython-input-1-091518d2f2e2&gt; in &lt;module&gt;()\n      3 total = 0.0\n      4 for n in numbers:\n----&gt; 5     assert n &gt; 0.0, 'Data should only contain positive values'\n      6     total += n\n      7 print('total is:', total)\n\nAssertionError: Data should only contain positive values\nPrograms like the Firefox browser are full of assertions: 10-20% of the code they contain are there to check that the other 80‚Äì90% are working correctly. Broadly speaking, assertions fall into three categories:\nA precondition is something that must be true at the start of a function in order for it to work correctly.\nA postcondition is something that the function guarantees is true when it finishes.\nAn invariant is something that is always true at a particular point inside a piece of code.\nFor example, suppose we are representing rectangles using a tuple of four coordinates (x0, y0, x1, y1), representing the lower left and upper right corners of the rectangle. In order to do some calculations, we need to normalize the rectangle so that the lower left corner is at the origin and the longest side is 1.0 units long. This function does that, but checks that its input is correctly formatted and that its result makes sense:\n\ndef normalize_rectangle(rect):\n    '''Normalizes a rectangle so that it is at the origin and 1.0 units long on its longest axis.\n    Input should be of the format (x0, y0, x1, y1).\n    (x0, y0) and (x1, y1) define the lower left and upper right corners\n    of the rectangle, respectively.'''\n    assert len(rect) == 4, 'Rectangles must contain 4 coordinates'\n    x0, y0, x1, y1 = rect\n    assert x0 &lt; x1, 'Invalid X coordinates'\n    assert y0 &lt; y1, 'Invalid Y coordinates'\n\n    dx = x1 - x0\n    dy = y1 - y0\n    if dx &gt; dy:\n        scaled = float(dx) / dy\n        upper_x, upper_y = 1.0, scaled\n    else:\n        scaled = float(dx) / dy\n        upper_x, upper_y = scaled, 1.0\n\n    assert 0 &lt; upper_x &lt;= 1.0, 'Calculated upper X coordinate invalid'\n    assert 0 &lt; upper_y &lt;= 1.0, 'Calculated upper Y coordinate invalid'\n\n    return (0, 0, upper_x, upper_y)\n\nThe preconditions on lines 3, 5, and 6 catch invalid inputs:\nprint(normalize_rectangle( (0.0, 1.0, 2.0) )) # missing the fourth coordinate\n---------------------------------------------------------------------------\nAssertionError                            Traceback (most recent call last)\n&lt;ipython-input-3-1b9cd8e18a1f&gt; in &lt;module&gt;()\n----&gt; 1 print(normalize_rectangle( (0.0, 1.0, 2.0) )) # missing the fourth coordinate\n\n&lt;ipython-input-2-c94cf5b065b9&gt; in normalize_rectangle(rect)\n      4     (x0, y0) and (x1, y1) define the lower left and upper right corners\n      5     of the rectangle, respectively.'''\n----&gt; 6     assert len(rect) == 4, 'Rectangles must contain 4 coordinates'\n      7     x0, y0, x1, y1 = rect\n      8     assert x0 &lt; x1, 'Invalid X coordinates'\n\nAssertionError: Rectangles must contain 4 coordinates\nprint(normalize_rectangle( (4.0, 2.0, 1.0, 5.0) )) # X axis inverted\n---------------------------------------------------------------------------\nAssertionError                            Traceback (most recent call last)\n&lt;ipython-input-4-325036405532&gt; in &lt;module&gt;()\n----&gt; 1 print(normalize_rectangle( (4.0, 2.0, 1.0, 5.0) )) # X axis inverted\n\n&lt;ipython-input-2-c94cf5b065b9&gt; in normalize_rectangle(rect)\n      6     assert len(rect) == 4, 'Rectangles must contain 4 coordinates'\n      7     x0, y0, x1, y1 = rect\n----&gt; 8     assert x0 &lt; x1, 'Invalid X coordinates'\n      9     assert y0 &lt; y1, 'Invalid Y coordinates'\n     10 \n\nAssertionError: Invalid X coordinates\nThe post-conditions on lines 17 and 18 help us catch bugs by telling us when our calculations cannot have been correct. For example, if we normalize a rectangle that is taller than it is wide everything seems OK:\n\nprint(normalize_rectangle( (0.0, 0.0, 1.0, 5.0) ))\n\n(0, 0, 0.2, 1.0)\n\n\nbut if we normalize one that‚Äôs wider than it is tall, the assertion is triggered:\nprint(normalize_rectangle( (0.0, 0.0, 5.0, 1.0) ))\n---------------------------------------------------------------------------\nAssertionError                            Traceback (most recent call last)\n&lt;ipython-input-6-8d4a48f1d068&gt; in &lt;module&gt;()\n----&gt; 1 print(normalize_rectangle( (0.0, 0.0, 5.0, 1.0) ))\n\n&lt;ipython-input-2-c94cf5b065b9&gt; in normalize_rectangle(rect)\n     19 \n     20     assert 0 &lt; upper_x &lt;= 1.0, 'Calculated upper X coordinate invalid'\n---&gt; 21     assert 0 &lt; upper_y &lt;= 1.0, 'Calculated upper Y coordinate invalid'\n     22 \n     23     return (0, 0, upper_x, upper_y)\n\nAssertionError: Calculated upper Y coordinate invalid\nRe-reading our function, we realize that line 11 should divide dy by dx rather than dx by dy. If we had left out the assertion at the end of the function, we would have created and returned something that had the right shape as a valid answer, but wasn‚Äôt. Detecting and debugging that would almost certainly have taken more time in the long run than writing the assertion.\nBut assertions aren‚Äôt just about catching errors: they also help people understand programs. Each assertion gives the person reading the program a chance to check (consciously or otherwise) that their understanding matches what the code is doing.\nMost good programmers follow two rules when adding assertions to their code. The first is, fail early, fail often. The greater the distance between when and where an error occurs and when it‚Äôs noticed, the harder the error will be to debug, so good code catches mistakes as early as possible.\nThe second rule is, turn bugs into assertions or tests. Whenever you fix a bug, write an assertion that catches the mistake should you make it again. If you made a mistake in a piece of code, the odds are good that you have made other mistakes nearby, or will make the same mistake (or a related one) the next time you change it. Writing assertions to check that you haven‚Äôt regressed (i.e., haven‚Äôt re-introduced an old problem) can save a lot of time in the long run, and helps to warn people who are reading the code (including your future self) that this bit is tricky.\n\nTest-Driven Development\nAn assertion checks that something is true at a particular point in the program. The next step is to check the overall behavior of a piece of code, i.e., to make sure that it produces the right output when it‚Äôs given a particular input. For example, suppose we need to find where two or more time series overlap. The range of each time series is represented as a pair of numbers, which are the time the interval started and ended. The output is the largest range that they all include:\n\n\n\ntest diagram\n\n\nMost novice programmers would solve this problem like this:\n\nWrite a function range_overlap.\nCall it interactively on two or three different inputs.\nIf it produces the wrong answer, fix the function and re-run that test.\n\nThis clearly works ‚Äî after all, thousands of scientists are doing it right now ‚Äî but there‚Äôs a better way:\n\nWrite a short function for each test.\nWrite a range_overlap function that should pass those tests.\nIf range_overlap produces any wrong answers, fix it and re-run the test functions.\n\nWriting the tests before writing the function they exercise is called test-driven development (TDD). Its advocates believe it produces better code faster because:\n\nIf people write tests after writing the thing to be tested, they are subject to confirmation bias, i.e., they subconsciously write tests to show that their code is correct, rather than to find errors.\nWriting tests helps programmers figure out what the function is actually supposed to do.\n\nHere are three test functions for range_overlap:\nassert range_overlap([ (0.0, 1.0) ]) == (0.0, 1.0)\nassert range_overlap([ (2.0, 3.0), (2.0, 4.0) ]) == (2.0, 3.0)\nassert range_overlap([ (0.0, 1.0), (0.0, 2.0), (-1.0, 1.0) ]) == (0.0, 1.0)\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\n&lt;ipython-input-9-dc16b942c085&gt; in &lt;module&gt;()\n----&gt; 1 assert range_overlap([ (0.0, 1.0) ]) == (0.0, 1.0)\n      2 assert range_overlap([ (2.0, 3.0), (2.0, 4.0) ]) == (2.0, 3.0)\n      3 assert range_overlap([ (0.0, 1.0), (0.0, 2.0), (-1.0, 1.0) ]) == (0.0, 1.0)\n\nNameError: name 'range_overlap' is not defined\nThe error is actually reassuring: we haven‚Äôt written range_overlap yet, so if the tests passed, it would be a sign that someone else had and that we were accidentally using their function.\nAnd as a bonus of writing these tests, we‚Äôve implicitly defined what our input and output look like: we expect a list of pairs as input, and produce a single pair as output.\nSomething important is missing, though. We don‚Äôt have any tests for the case where the ranges don‚Äôt overlap at all:\nassert range_overlap([ (0.0, 1.0), (5.0, 6.0) ]) == ???\nWhat should range_overlap do in this case: fail with an error message, produce a special value like (0.0, 0.0) to signal that there‚Äôs no overlap, or something else? Any actual implementation of the function will do one of these things; writing the tests first helps us figure out which is best before we‚Äôre emotionally invested in whatever we happened to write before we realized there was an issue.\nAnd what about this case?\nassert range_overlap([ (0.0, 1.0), (1.0, 2.0) ]) == ???\nDo two segments that touch at their endpoints overlap or not? Mathematicians usually say ‚Äúyes‚Äù, but engineers usually say ‚Äúno‚Äù. The best answer is ‚Äúwhatever is most useful in the rest of our program‚Äù, but again, any actual implementation of range_overlap is going to do something, and whatever it is ought to be consistent with what it does when there‚Äôs no overlap at all.\nSince we‚Äôre planning to use the range this function returns as the X axis in a time series chart, we decide that:\n\nevery overlap has to have non-zero width, and\nwe will return the special value None when there‚Äôs no overlap.\n\nNone is built into Python, and means ‚Äúnothing here‚Äù. (Other languages often call the equivalent value null or nil). With that decision made, we can finish writing our last two tests:\nassert range_overlap([ (0.0, 1.0), (5.0, 6.0) ]) == None\nassert range_overlap([ (0.0, 1.0), (1.0, 2.0) ]) == None\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\n&lt;ipython-input-13-42de7ddfb428&gt; in &lt;module&gt;()\n----&gt; 1 assert range_overlap([ (0.0, 1.0), (5.0, 6.0) ]) == None\n      2 assert range_overlap([ (0.0, 1.0), (1.0, 2.0) ]) == None\n\nNameError: name 'range_overlap' is not defined\nAgain, we get an error because we haven‚Äôt written our function, but we‚Äôre now ready to do so:\n\ndef range_overlap(ranges):\n    '''Return common overlap among a set of [low, high] ranges.'''\n    lowest = 0.0\n    highest = 1.0\n    for (low, high) in ranges:\n        lowest = max(lowest, low)\n        highest = min(highest, high)\n    return (lowest, highest)\n\n(Take a moment to think about why we use max to raise lowest and min to lower highest). We‚Äôd now like to re-run our tests, but they‚Äôre scattered across three different cells. To make running them easier, let‚Äôs put them all in a function:\n\ndef test_range_overlap():\n    assert range_overlap([ (0.0, 1.0), (5.0, 6.0) ]) == None\n    assert range_overlap([ (0.0, 1.0), (1.0, 2.0) ]) == None\n    assert range_overlap([ (0.0, 1.0) ]) == (0.0, 1.0)\n    assert range_overlap([ (2.0, 3.0), (2.0, 4.0) ]) == (2.0, 3.0)\n    assert range_overlap([ (0.0, 1.0), (0.0, 2.0), (-1.0, 1.0) ]) == (0.0, 1.0)\n\nWe can now test range_overlap with a single function call:\ntest_range_overlap() \n---------------------------------------------------------------------------\nAssertionError                            Traceback (most recent call last)\n&lt;ipython-input-16-80290759369d&gt; in &lt;module&gt;()\n----&gt; 1 test_range_overlap()\n\n&lt;ipython-input-15-d61f343ad67a&gt; in test_range_overlap()\n      1 def test_range_overlap():\n----&gt; 2     assert range_overlap([ (0.0, 1.0), (5.0, 6.0) ]) == None\n      3     assert range_overlap([ (0.0, 1.0), (1.0, 2.0) ]) == None\n      4     assert range_overlap([ (0.0, 1.0) ]) == (0.0, 1.0)\n      5     assert range_overlap([ (2.0, 3.0), (2.0, 4.0) ]) == (2.0, 3.0)\n\nAssertionError: \nThe first test that was supposed to produce None fails, so we know something is wrong with our function. We don‚Äôt know whether the other tests passed or failed because Python halted the program as soon as it spotted the first error. Still, some information is better than none, and if we trace the behavior of the function with that input, we realize that we‚Äôre initializing lowest and highest to 0.0 and 1.0 respectively, regardless of the input values. This violates another important rule of programming: always initialize from data.\nFix range_overlap. Re-run test_range_overlap after each change you make.\n\nimport numpy\n\ndef range_overlap(ranges):\n    '''Return common overlap among a set of [low, high] ranges.'''\n    if not ranges:\n        # ranges is None or an empty list\n        return None\n    lowest, highest = ranges[0]\n    for (low, high) in ranges[1:]:\n        lowest = max(lowest, low)\n        highest = min(highest, high)\n    if lowest &gt;= highest:  # no overlap\n        return None\n    else:\n        return (lowest, highest)"
  },
  {
    "objectID": "workshop/modules/defensive_programming.html#key-points",
    "href": "workshop/modules/defensive_programming.html#key-points",
    "title": "Defensive Programming",
    "section": "Key points",
    "text": "Key points\n\nProgram defensively, i.e., assume that errors are going to arise, and write code to detect them when they do.\nPut assertions in programs to check their state as they run, and to help readers understand how those programs are supposed to work.\nUse preconditions to check that the inputs to a function are safe to use.\nUse postconditions to check that the output from a function is safe to use.\nWrite tests before writing code in order to help determine exactly what that code is supposed to do."
  }
]